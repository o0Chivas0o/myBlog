<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>myBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-14T14:46:10.773Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Li zhiying</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我对http的一些简单理解</title>
    <link href="http://yoursite.com/2017/12/14/%E6%88%91%E5%AF%B9http%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/12/14/我对http的一些简单理解/</id>
    <published>2017-12-14T13:58:19.000Z</published>
    <updated>2017-12-14T14:46:10.773Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇博客只是我对HTTP的一些浅显的理解</p></blockquote><hr><p>HTTP是一个超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议[1]。HTTP是万维网的数据通信的基础。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。通过HTTP或者HTTPS协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识。</p><ul><li>摘自wiki<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">HTTP</a></li></ul><hr><ul><li>浏览器负责发起请求</li><li>服务器在 80 端口接收请求</li><li>服务器负责返回内容（响应）</li><li>浏览器负责下载响应内容<br>HTTP是浏览器和服务器之间的一种通讯协议，指导浏览器和服务器如何进行沟通。</li></ul><p>在浏览器和服务器之间通讯会伴随着请求与响应，过程基本就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">浏览器 ---&gt; 服务器 // 浏览器向服务器发送请求</span><br><span class="line">浏览器 &lt;--- 服务器 // 浏览器从服务器得到响应</span><br></pre></td></tr></table></figure></p><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><ol><li>请求构成<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 动词 路径 协议/版本  // 1.请求头</span><br><span class="line">2 Key1: value1      // 2.消息体</span><br><span class="line">2 Key2: value2</span><br><span class="line">2 Key3: value3</span><br><span class="line">2 Content-Type: application/x-www-form-urlencoded</span><br><span class="line">2 Host: www.baidu.com</span><br><span class="line">2 User-Agent: curl/7.54.0</span><br><span class="line">3                   // 3.空行(回车)</span><br><span class="line">4 要上传的数据        // 4.其他消息内容</span><br></pre></td></tr></table></figure></li></ol><ul><li>请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）</li><li>第三部分永远都是一个回车（\n）</li><li>动词有 GET POST PUT PATCH DELETE HEAD OPTIONS 等</li><li>这里的路径包括「查询参数」，但不包括「锚点」</li><li>如果你没有写路径，那么路径默认为 /</li><li>第 2 部分中的 Content-Type 标注了第 4 部分的格式</li></ul><ol><li>请求方法</li></ol><ul><li>GET 一般用于查询</li><li>POST 一般用于表单提交</li></ul><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>响应的构成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 协议/版本号 状态码 状态解释    // 1.响应头</span><br><span class="line">2 Key1: value1               // 2.消息体</span><br><span class="line">2 Key2: value2</span><br><span class="line">2 Content-Length: 17931</span><br><span class="line">2 Content-Type: text/html</span><br><span class="line">3                            // 3.回车</span><br><span class="line">4 要下载的内容                 // 4.其他消息内容</span><br></pre></td></tr></table></figure></p><ul><li>状态码要背，是服务器对浏览器说的话<ul><li>1xx 不常用</li><li>2xx 表示成功</li><li>3xx 表示滚吧</li><li>4xx 表示你丫错了</li><li>5xx 表示好吧，我错了</li></ul></li><li>状态解释没什么用</li><li>第 2 部分中的 Content-Type 标注了第 4 部分的格式</li><li>第 2 部分中的 Content-Type 遵循 MIME 规范</li></ul><h3 id="关于HTTP相关问题"><a href="#关于HTTP相关问题" class="headerlink" title="关于HTTP相关问题"></a>关于HTTP相关问题</h3><p>1.HTTP 协议的底层其实是由 TCP 协议和 IP 协议（简称 TCP/IP）构建的。</p><ul><li><p><a href="https://www.nowcoder.com/questionTerminal/63c8b45c91a544bd8febc1f1ff02e3b5?toCommentId=73766" target="_blank" rel="noopener">TCP 和 UDP 的区别是什么</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TCP 可靠、面向连接、相对 UDP 较慢；UDP 不可靠，不面向连接、相对 TCP 较快。</span><br><span class="line">其中可靠是指请求成功与否，请求成功会看到URL对应地址的页面，请求失败会看到一个带有状态码的页面。</span><br><span class="line">面向连接是指TCP必须发起一个连接，连接到对应地址的服务器。</span><br></pre></td></tr></table></figure></li><li><p><a href="https://github.com/jawil/blog/issues/14" target="_blank" rel="noopener">TCP 的三次握手指的是什么</a><br>每次建立连接前，客户端和服务端之前都要先进行三次对话才开始正式传输内容，三次对话大概是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 客户端：我要连接你了，可以吗</span><br><span class="line">2. 服务端：嗯，我准备好了，连接我吧</span><br><span class="line">3. 客户端：那我连接你咯。</span><br><span class="line">4. 开始后面步骤</span><br></pre></td></tr></table></figure></li></ul><ol><li>TCP的访问不光需要指定IP，还需要指定端口。</li></ol><ul><li>使用 HTTP 协议访问另一个 IP 时，比如同时提供 IP 和端口号，缺一不可。</li><li>浏览器会自动默认加上80端口。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http//qq.com</span><br><span class="line">http//qq.com:80 //浏览器默认添加上的80端口</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这篇博客只是我对HTTP的一些浅显的理解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;HTTP是一个超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何阅读HTML5规范文档</title>
    <link href="http://yoursite.com/2017/12/12/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BBHTML5%E8%A7%84%E8%8C%83%E6%96%87%E6%A1%A3/"/>
    <id>http://yoursite.com/2017/12/12/如何阅读HTML5规范文档/</id>
    <published>2017-12-12T14:34:30.000Z</published>
    <updated>2017-12-12T14:40:23.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ol><li>翻墙软件:可以是Shadowsocks之类的付费翻墙软件，也可以是其他的免费翻墙软件</li><li>Chrome浏览器</li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>在Chrome浏览器里输入HTML 5 specs</li><li>点击HTML 5-W3C 也就是Google搜索结果第一个网址<br><img src="http://upload-images.jianshu.io/upload_images/5467482-04972b59a5c0d1ca.png?imageMogr2/auto-orient/strip%7CimageView2/2" alt="Image of Yaktocat"></li></ol><ul><li>然后进入目录，根据目录指引找到需要读的标准文档即可。</li></ul><h2 id="例如：我需要查找关于html根元素相关的信息我可以进行如下操作"><a href="#例如：我需要查找关于html根元素相关的信息我可以进行如下操作" class="headerlink" title="例如：我需要查找关于html根元素相关的信息我可以进行如下操作"></a>例如：我需要查找关于html根元素相关的信息我可以进行如下操作</h2><p>1.查看目录<br>2.找到“4 The elements of HTML”这个目录<br>3.点击进入目录，就能看到关于html根元素的信息。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果看不懂英文可以选择Chorme浏览器的内置翻译对照看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备材料&quot;&gt;&lt;a href=&quot;#准备材料&quot; class=&quot;headerlink&quot; title=&quot;准备材料&quot;&gt;&lt;/a&gt;准备材料&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;翻墙软件:可以是Shadowsocks之类的付费翻墙软件，也可以是其他的免费翻墙软件&lt;/li&gt;
&lt;li&gt;Chro
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈HTML5元素</title>
    <link href="http://yoursite.com/2017/12/12/%E6%B5%85%E8%B0%88HTML5%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2017/12/12/浅谈HTML5元素/</id>
    <published>2017-12-12T14:33:03.000Z</published>
    <updated>2017-12-13T08:38:34.133Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>HTML元素基本分为三类，空元素、行内元素（内联元素）、块级元素。</p></blockquote><h3 id="空元素"><a href="#空元素" class="headerlink" title="空元素"></a>空元素</h3><blockquote><p>一个空元素（empty element）可能是 HTML，SVG，或者 MathML 里的一个不可能存在子节点（例如内嵌的元素或者元素内的文本）的element。<br>这是mdn给与的定义。我的理解就是一个元素没有闭合标签，就是空元素。</p></blockquote><p><img src="https://mdn.mozillademos.org/files/7659/anatomy-of-an-html-element.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a herf=&quot;#&quot;&gt;</span><br><span class="line">&lt;img src=&quot;https//xxx.xxx.com/xxx.png&quot; alt=&quot;图片&quot; width=&quot;10px&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot;&gt;</span><br></pre></td></tr></table></figure></p><ul><li>类似上述这种没有闭合标签的元素即为空元素。</li><li>参考<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/%E7%A9%BA%E5%85%83%E7%B4%A0" target="_blank" rel="noopener">MDN空元素</a>介绍</li></ul><h3 id="行内元素-内联元素"><a href="#行内元素-内联元素" class="headerlink" title="行内元素(内联元素)"></a>行内元素(内联元素)</h3><blockquote><p>一个行内元素只占据它对应标签的边框所包含的空间。</p></blockquote><p><a href="http://js.jirengu.com/dekuv/1/edit?html,css" target="_blank" rel="noopener">例子</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;Hello&lt;/span&gt;</span><br><span class="line">&lt;button&gt;click me&lt;/button&gt;</span><br><span class="line">&lt;a herf=&quot;#&quot;&gt;   // a标签同样是行内元素</span><br></pre></td></tr></table></figure><ul><li>行内元素默认自左到右排列。</li><li>默认情况下，行内元素不会以新行开始，而块级元素会新起一行。</li><li>参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Inline_elemente" target="_blank" rel="noopener">MDN行内元素</a>介绍。</li></ul><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><blockquote><p>块级元素占据其父元素（容器）的整个空间，因此创建了一个“块”。通常浏览器会在块级元素前后另起一个新行。</p></blockquote><p><a href="http://js.jirengu.com/dekuv/1/edit?html,css,output" target="_blank" rel="noopener">例子</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;        //块级元素div</span><br><span class="line">  &lt;span&gt;     //内联元素span</span><br><span class="line">    hi       // 文章内容</span><br><span class="line">  &lt;/span&gt;    // 内联元素span闭合标签</span><br><span class="line">&lt;/div&gt;       //块级元素div闭合标签</span><br><span class="line"></span><br><span class="line">&lt;section&gt; </span><br><span class="line">  &lt;span&gt;</span><br><span class="line">    hellow</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">  &lt;a herf=&quot;&quot;&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ul><li>块级元素默认自上到下排列。</li><li>在CSS盒模型中，块级元素的宽度、高度是有所有行内元素的高度、宽度撑起来的，且行内元素自左到右排列，块级元素自上到下排列，即<code>文档流（normal float）</code>。</li><li>一般块级元素可以包含行内元素和其他块级元素。这种结构上的包含继承区别可以使块级元素创建比行内元素更”大型“的结构。</li><li>参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Block-level_elements" target="_blank" rel="noopener">MDN块级元素</a>介绍。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;HTML元素基本分为三类，空元素、行内元素（内联元素）、块级元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;空元素&quot;&gt;&lt;a href=&quot;#空元素&quot; class=&quot;headerlink&quot; title=&quot;空元素&quot;&gt;&lt;/a&gt;空元素&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webstorm将项目上传到github</title>
    <link href="http://yoursite.com/2017/12/12/webstorm%E5%B0%86%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0github/"/>
    <id>http://yoursite.com/2017/12/12/webstorm将项目上传到github/</id>
    <published>2017-12-12T09:43:23.000Z</published>
    <updated>2017-12-12T09:45:30.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何在WebStorm上将文件上传到GitHub"><a href="#如何在WebStorm上将文件上传到GitHub" class="headerlink" title="如何在WebStorm上将文件上传到GitHub"></a>如何在WebStorm上将文件上传到GitHub</h1><h3 id="需要软件-WebStorm"><a href="#需要软件-WebStorm" class="headerlink" title="需要软件 : WebStorm"></a>需要软件 : WebStorm</h3><blockquote><p>我是mac笔记本，所以只展示mac下的webstrom如何将project文件上传到github，<br>windows系统下和mac os 系统大同小异。</p></blockquote><h3 id="首先我们需要拥有一个GitHub账户，没有请自行创建，然后进入WebStorm。"><a href="#首先我们需要拥有一个GitHub账户，没有请自行创建，然后进入WebStorm。" class="headerlink" title="首先我们需要拥有一个GitHub账户，没有请自行创建，然后进入WebStorm。"></a>首先我们需要拥有一个GitHub账户，没有请自行创建，然后进入WebStorm。</h3><ul><li><p>第一步:进入webstrom，点击左上角webstrom,或者COMMAND+，键进入preferences.</p><p><img src="https://i.loli.net/2017/07/28/597aeb4704b17.jpeg" alt=""></p></li><li><p>第二步:进入preferences后，点击搜索框输入git，会有2个选项，点击GitHub，在host输入github.com，auth type处选择password，在login输入账户，在password输入密码，点击test。</p><p><img src="https://i.loli.net/2017/07/28/597aeda861fcf.jpeg" alt=""></p></li><li><p>第三步:test之后会出现下图。</p><p><img src="https://i.loli.net/2017/07/28/597aee3d4b14f.png" alt=""></p><p><img src="https://i.loli.net/2017/07/28/597aee589356c.png" alt=""></p><p>出现这上图表示已成功连接到GitHub。</p></li><li><p>第四步:点击VCS，选项至图中标识处，选择share project to GitHub。</p><p><img src="https://i.loli.net/2017/07/28/597aeecb31aec.jpeg" alt=""></p></li><li><p>第五步:在弹出的会话框里面的New repository name 处写下项目名称（只能以英文为名称），即在GitHub上创建一个response，在Description处写下项目描述（可以不写）。</p><p><img src="https://i.loli.net/2017/07/28/597aef9a8a795.jpeg" alt=""></p></li><li><p>第六步:之后弹出的会话框检查上传的项目，在Commit Message处填写提交信息（可不写），之后点击OK即可上传到GitHub了。</p><p><img src="https://i.loli.net/2017/07/28/597af08226f46.jpeg" alt=""></p></li><li><p>第七步:最后在WebStorm的右下角会弹出这个对话框，表示已经成功上传至GitHub。</p><p><img src="https://i.loli.net/2017/07/28/597af1071a716.jpeg" alt=""></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何在WebStorm上将文件上传到GitHub&quot;&gt;&lt;a href=&quot;#如何在WebStorm上将文件上传到GitHub&quot; class=&quot;headerlink&quot; title=&quot;如何在WebStorm上将文件上传到GitHub&quot;&gt;&lt;/a&gt;如何在WebStorm上将文
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>用Hexo搭建个人博客系统</title>
    <link href="http://yoursite.com/2017/12/07/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2017/12/07/用Hexo搭建个人博客系统/</id>
    <published>2017-12-07T05:43:52.900Z</published>
    <updated>2017-12-12T09:53:47.606Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇详细文章来讲述我用Mac搭建Hexo博客于Github上的完整历程，现在写下些经验来分享。</p><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo官网</a>本就有对Hexo安装及使用的详细介绍，墙裂推荐。这里来讲述自己安装的亲身步骤，或有区别。</p><ol><li><p>Node.js<br>用来生成静态页面。<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js官网</a>，下载8.9.3LTS，一路安装即可。</p></li><li><p>Git<br>用来将本地Hexo内容提交到Github上。Xcode自带Git，这里不再赘述。如果没有Xcode可以参考<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo官网</a>上的安装方法。</p></li><li><p>终端(Iterm2)<br>登录<a href="https://www.iterm2.com/" target="_blank" rel="noopener">Iterm2官网</a>，点击Download即可下载Iterm2，作为Mac上最强大的终端，墙裂推荐。(可以自动设置配色方案等等一系列操作)<br>Mac其实自带终端，根据个人喜好选择下载。</p></li><li><p>安装npm<br>终端下输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li></ol><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><blockquote><p>注意:如果无法正常安装 需要在<code>npm install -g hexo-cli</code>前加上<code>sudo</code>，即<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>输入管理员密码(Mac登录密码)。</li><li>sudo:以管理员身份运行。</li><li>-g:全局安装。</li></ul><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>终端到桌面，创建一个安全的文件夹，别在根目录下乱搞，并执行<code>hexo init</code>命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init xxx</span><br></pre></td></tr></table></figure></p><p>xxx是你建立博客的名称，如果不填写，则默认文件夹名为myBlog。cd到<code>xxx</code>文件夹下，并执行如下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></p><p>此时，用浏览器打开<code>http//localhost:4000</code>即可看到一个默认主题的静态页面。<br>此时本地hexo博客就搭建好了。</p><h4 id="关联GitHub"><a href="#关联GitHub" class="headerlink" title="关联GitHub"></a>关联GitHub</h4><ol><li>创建仓库<br>登录你的GitHub账号，新建仓库，名为<code>你的用户名.github.io</code>固定写法，如<code>o0Chivas0o.github.io</code>即下图所示:<br><img src="//i.loli.net/2017/12/11/5a2dfd48e15f2.jpeg" alt=""></li></ol><p>本地<code>blog</code>文件夹内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">├── themes</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure></p><p>终端cd到<code>xxx</code>文件夹下,运行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i  // 安装依赖</span><br></pre></td></tr></table></figure></p><p>终端cd到<code>xxx</code>文件夹下，打开<code>_consig.yml</code>，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open _consig.yml</span><br></pre></td></tr></table></figure></p><ul><li>第 6 行的 title 改成 <code>你想要的名字</code> 即 <code>博客名字</code></li><li>第 9 行的 author 改成 <code>你的名字</code> 即 <code>作者名字</code></li><li>最后一行 type 改成 <code>type: git</code> <code>type:</code>后有一个空格 请注意!</li><li><p>在最后一行后面新增一行，左边与 type 平齐，加上一行 <code>repo: 仓库地址</code></p><p>终端运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>安装<code>git</code>部署插件</p></li></ul><p>运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><p>此时你就可以在<code>你的名字.github.io</code>看到你的博客了。</p><h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><ol><li><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">https://github.com/hexojs/hexo/wiki/Themes</a> 上有主题合集，可以挑选一个自己喜欢的作为博客主题。</li><li>随便找一个主题，比如我的是：<a href="https://github.com/fi3ework/hexo-theme-archer" target="_blank" rel="noopener">https://github.com/fi3ework/hexo-theme-archer</a></li><li>复制他的ssh地址，我的主题的地址为:<code>git@github.com:fi3ework/hexo-theme-archer.git</code></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd themes // 进入到主题目录</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:fi3ework/hexo-theme-archer.git // 下载主题</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd .. // 回到上层目录</span><br></pre></td></tr></table></figure></li><li><p>将<code>_config.yml</code><br>(是<code>xxx</code>文件夹里面的<code>_config.yml</code>文件，<code>themes</code>文件夹里面也有一个<code>_config.yml</code>文件，要搞混了)<br>的第75行主题名字改为<code>theme: archer</code>，保存。</p></li><li><p>终端输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li><li><p>等待一分钟，刷新博客页面，即可看到新的主题的博客了，如果看不到，把浏览器缓存清理一遍再刷新页面。</p></li></ol><blockquote><p>此处需要注意 <code>_config.yml</code>文件中 <code>theme: xxx</code> xxx前面同样有空格，<br>并且主题名字不要弄错，你下载的主题名字在 <code>themes</code>文件夹中有，<br>就是你下载到本地的文件夹名字。</p></blockquote><hr><p>还有一些命令的解释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g // 就是hexo generate</span><br><span class="line">$ hexo d // 就是hexo deploy</span><br><span class="line">$ hexo new xxx //生成一篇名为xxx的博客</span><br></pre></td></tr></table></figure></p><ol><li>每次<code>hexo new 博客名</code> 之后，需要<code>hexo g</code>，再<code>hexo d</code>，<br>你的文章就会更新到<code>你的名字.github.io</code>的网页博客中。</li><li><p>关于主题：</p><ul><li><p>每次更换主题需要输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean // 清空之前生成的主题</span><br><span class="line">$ hexo g  // 生成新的主题</span><br><span class="line">$ hexo d // 发布到github</span><br></pre></td></tr></table></figure></li><li><p>每个主题下有具体文档，根据文档来编辑主题文件夹中的<code>_config.yml</code>文件来达到自己想要的效果。</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是一篇详细文章来讲述我用Mac搭建Hexo博客于Github上的完整历程，现在写下些经验来分享。&lt;/p&gt;
&lt;h4 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h4&gt;&lt;p&gt;&lt;a hr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/12/07/hello-world/"/>
    <id>http://yoursite.com/2017/12/07/hello-world/</id>
    <published>2017-12-07T04:09:36.801Z</published>
    <updated>2017-12-07T04:09:36.801Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
