<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>myBlog</title>
  
  <subtitle>rich ? doSomeLike() : doSomeNeed()</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-27T02:42:55.030Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>zsh快捷键</title>
    <link href="http://yoursite.com/2018/12/27/zsh%20%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2018/12/27/zsh 快捷键/</id>
    <published>2018-12-27T02:33:01.000Z</published>
    <updated>2018-12-27T02:42:55.030Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ZSH快捷键"><a href="#ZSH快捷键" class="headerlink" title="ZSH快捷键"></a>ZSH快捷键</h3><blockquote><p>仅供参考</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">⌃ + u：清空当前行</span><br><span class="line">⌃ + a：移动到行首</span><br><span class="line">⌃ + e：移动到行尾</span><br><span class="line">⌃ + f：向前移动</span><br><span class="line">⌃ + b：向后移动</span><br><span class="line">⌃ + p：上一条命令</span><br><span class="line">⌃ + n：下一条命令</span><br><span class="line">⌃ + r：搜索历史命令</span><br><span class="line">⌃ + y：召回最近用命令删除的文字</span><br><span class="line">⌃ + h：删除光标之前的字符</span><br><span class="line">⌃ + d：删除光标所指的字符</span><br><span class="line">⌃ + w：删除光标之前的单词</span><br><span class="line">⌃ + k：删除从光标到行尾的内容</span><br><span class="line">⌃ + t：交换光标和之前的字符</span><br><span class="line">⌘ + Click：可以打开文件，文件夹和链接</span><br><span class="line">⌘ + n：新建窗口</span><br><span class="line">⌘ + t：新建标签页</span><br><span class="line">⌘ + w：关闭当前页</span><br><span class="line">⌘ + 数字 || ⌘ + 方向键：切换标签页</span><br><span class="line">⌥⌘ + 数字：切换窗口</span><br><span class="line">⌘ + enter：切换全屏</span><br><span class="line">⌘ + d：左右分屏</span><br><span class="line">⇧⌘ + d：上下分屏</span><br><span class="line">⌘ + ;：自动补全历史记录</span><br><span class="line">⇧⌘ + h：自动补全剪贴板历史</span><br><span class="line">⌥⌘ + e：查找所有来定位某个标签页</span><br><span class="line">⌘ + r || ⌃ + l：清屏</span><br><span class="line">⌘ + /：显示光标位置</span><br><span class="line">⌥⌘ + b：历史回放</span><br><span class="line">⌘ + f：查找，然后用tab和⇧ + tab可以向右和向左补全，补全之后的内容会被自动复制， 还可以用⌥ + enter将查找结果输入终端</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ZSH快捷键&quot;&gt;&lt;a href=&quot;#ZSH快捷键&quot; class=&quot;headerlink&quot; title=&quot;ZSH快捷键&quot;&gt;&lt;/a&gt;ZSH快捷键&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;仅供参考&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;hig
      
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Markdown基础语法</title>
    <link href="http://yoursite.com/2018/12/26/Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/12/26/Markdown基础语法/</id>
    <published>2018-12-26T03:33:01.000Z</published>
    <updated>2018-12-27T02:18:23.021Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">标题：</span><br><span class="line">#h1级标题</span><br><span class="line">##h2级标题</span><br><span class="line">###h3级标题</span><br><span class="line">####h4级标题</span><br><span class="line">#####h5级标题</span><br><span class="line">######h6级标题</span><br><span class="line"></span><br><span class="line">分割线：三个以上的短线 即可作出分割线</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line">超链接：[连接名称](网址 , 标题)</span><br><span class="line">[我是链接名](http://www.izhangbo.cn, &quot;我是标题&quot;)</span><br><span class="line">[&lt;i class=&quot;icon-refresh&quot;&gt;&lt;/i&gt; 点我刷新](/sonfilename/)</span><br><span class="line"></span><br><span class="line">另一种超链接写法：[链接名][链接代号]</span><br><span class="line">[here][3]</span><br><span class="line">然后在别的地方定义 3 这个详细链接信息，</span><br><span class="line">[3]: http://www.izhangbo.cn &quot;聚牛团队&quot;</span><br><span class="line"></span><br><span class="line">直接展示链接的写法：&lt;http://www.izhangbo.cn&gt;</span><br><span class="line"></span><br><span class="line">键盘键</span><br><span class="line">&lt;kbd&gt;Ctrl+[&lt;/kbd&gt; and &lt;kbd&gt;Ctrl+]&lt;/kbd&gt;</span><br><span class="line"></span><br><span class="line">code格式：反引号</span><br><span class="line">Use the `printf()` function.</span><br><span class="line"></span><br><span class="line">``There is a literal backtick (`) here.针对在代码区段内插入反引号的情况`` </span><br><span class="line"></span><br><span class="line">强调：</span><br><span class="line">*斜体强调*</span><br><span class="line">**粗体强调**</span><br><span class="line"></span><br><span class="line">图片</span><br><span class="line">![Alt text](http://www.izhangbo.cn/wp-content/themes/minty/img/logo.png &quot;Optional title&quot;)</span><br><span class="line"></span><br><span class="line">使用 icon 图标文字</span><br><span class="line">&lt;i class=&quot;icon-cog&quot;&gt;&lt;/i&gt;</span><br><span class="line"></span><br><span class="line">段落：以一个空行开始，以一个空行结束，中间的就是一个段落。</span><br><span class="line"></span><br><span class="line">表格：</span><br><span class="line"></span><br><span class="line">Item     | Value</span><br><span class="line">-------- | ---</span><br><span class="line">Computer | $1600</span><br><span class="line">Phone    | $12</span><br><span class="line">Pipe     | $1</span><br><span class="line"></span><br><span class="line">无序列表：使用 - 加一个空格（）</span><br><span class="line"></span><br><span class="line">- 无需列表1</span><br><span class="line">- 无序列表2</span><br><span class="line">- 无序列表3</span><br><span class="line"></span><br><span class="line">有序列表：使用 数字 加一个英文句点</span><br><span class="line"></span><br><span class="line">1. 有序列表</span><br><span class="line">2. 有序列表</span><br><span class="line">3. 有序列表</span><br><span class="line">4. 有序列表</span><br><span class="line">5. 有序列表</span><br><span class="line"></span><br><span class="line">换行缩进形成代码区块</span><br><span class="line"></span><br><span class="line">    这里先换行，然后缩进4个空格，之后的内容便可以原样显示了，适合用于显示代码内容。直到文本结束或最后一个存在缩进的行为止。    </span><br><span class="line"></span><br><span class="line">块引用</span><br><span class="line">&gt;给引用的文本开始位置都加一个 &apos;&gt;&apos;，</span><br><span class="line">&gt;便可组成一个块引用。在块引用中，可以结合</span><br><span class="line">&gt;其他markdown元素一块使用，比如列表。</span><br><span class="line">&gt;**强调**</span><br><span class="line">也可以只在第一行加大于号，其他位置不加。</span><br><span class="line"></span><br><span class="line">&gt;- 块引用里使用列表，需要和上面的内容隔开一个空行</span><br><span class="line">&gt;- 记得加空格哦。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>git使用</title>
    <link href="http://yoursite.com/2018/12/21/git/"/>
    <id>http://yoursite.com/2018/12/21/git/</id>
    <published>2018-12-21T09:33:01.000Z</published>
    <updated>2019-01-02T08:41:40.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本控制器-Version-Control-Systems"><a href="#版本控制器-Version-Control-Systems" class="headerlink" title="版本控制器 (Version Control Systems)"></a>版本控制器 (Version Control Systems)</h2><ul><li>在未有工作工具流之前,使用的文件夹目录拷贝,效率低下,沟通成本高.</li><li>集中式版本控制系统 <ul><li>SVN、VSS</li></ul></li><li>分布式版本控制系统 <ul><li>Git<br><br><br>由于因在工作中只用过git版本控制器,也就是分布式版本控制器.所以只总结git的使用.并且最近在<code>极客时间</code>上学习<code>苏玲</code>老师的<code>「玩转git三剑客」</code>的视频课程,一起学习,一起总结.<br><br></li></ul></li></ul><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><blockquote><ol><li>最优的存储能力</li><li>非凡的性能</li><li>开源的</li><li>很容易做备份</li><li>支持离线操作</li><li>很容易定制工作流程</li></ol></blockquote><h3 id="Git下载"><a href="#Git下载" class="headerlink" title="Git下载"></a>Git下载</h3><blockquote><p>下载链接 : <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p></blockquote><h3 id="Git最小配置"><a href="#Git最小配置" class="headerlink" title="Git最小配置"></a>Git最小配置</h3><blockquote><p>给git配置用户名和用户邮箱</p></blockquote><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git config [--local | --global | --system] user.name &apos;Your name&apos; // 名称设置</span><br><span class="line">git config [--local | --global | --system] user.email &apos;Your email&apos; // 邮箱设置</span><br><span class="line"></span><br><span class="line">--local 区域内本仓库</span><br><span class="line">--global 全局仓库有效</span><br><span class="line">--system 系统登录用户有效</span><br><span class="line"></span><br><span class="line">// 设置之后 可以通过下面命令来查看设置是否成功</span><br><span class="line">git config --list --global</span><br><span class="line">// 设置的是全局 需加上--global 对全局查看</span><br><span class="line">// 若为local 必须有一个本地项目仓库</span><br><span class="line"></span><br><span class="line">// 清除命令</span><br><span class="line">git config unset [--local | --global | --system] user.name &apos;Your name&apos; // 名称设置</span><br><span class="line">git config unset [--local | --global | --system] user.email &apos;Your email&apos; // 邮箱设置</span><br></pre></td></tr></table></figure>&lt;/br&gt;</code></pre><p>——2018.12.24日更新——</p><h3 id="为每个项目添加-gitignore文件"><a href="#为每个项目添加-gitignore文件" class="headerlink" title="为每个项目添加.gitignore文件"></a>为每个项目添加.gitignore文件</h3><blockquote><p>通常提交项目会习惯性使用’git add .’的命令,这样的操作会将目录中所有文件都添加到文件暂缓区(git status 所展示的文件和文件所在地址),而实际项目提交当中会引用到大量的第三方库、方法，会导致将<code>node_modules</code>整个文件夹提交到暂缓区,推送到远程仓库会造成效率降低。所以会在每个项目文件夹中添加<code>.gitignore</code>文件来默认不上传这些文件。</p></blockquote><p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">node_modules</span><br><span class="line">/dist</span><br><span class="line"></span><br><span class="line"># local env files</span><br><span class="line">.env.local</span><br><span class="line">.env.*.local</span><br><span class="line"></span><br><span class="line"># Log files</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line"></span><br><span class="line"># Editor directories and files</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">*.suo</span><br><span class="line">*.ntvs*</span><br><span class="line">*.njsproj</span><br><span class="line">*.sln</span><br><span class="line">*.sw*</span><br></pre></td></tr></table></figure></p><p>上述文件是通过<code>vue-cli</code>自动构建项目目录下的<code>.gitignore</code>文件,默认git不提交<code>各类编译器的配置文件</code>和<code>第三方npm包、方法、插件</code>文件。</p><h2 id="Git-commit-规范"><a href="#Git-commit-规范" class="headerlink" title="Git commit 规范"></a>Git commit 规范</h2><blockquote><p>引用<code>@知乎者也</code>的微信公众号文章:「我的commit规范」→[<a href="https://mp.weixin.qq.com/s?__biz=MzIyMzEyMDQ5MQ==&amp;mid=2656091498&amp;idx=1&amp;sn=8e15c57c3c1cb6c7579208aaad5ae256&amp;chksm=f387006ec4f08978606e1168d417869a02c42945eed246a310c6bc06e7538888484d857eaffc&amp;scene=4&amp;subscene=126&amp;ascene=0&amp;devicetype=android-26&amp;version=26070337&amp;nettype=WIFI&amp;abtest_cookie=BQABAAoACwANABMAFAAFACOXHgBZmR4AhJkeAImZHgCNmR4AAAA%3D&amp;lang=zh_CN&amp;pass_ticket=AAI4HCiVr%2FcBu7J0BPB0hr%2Fv6WUoYnaJG1b7tytCnHA4Oeh9WeRwR8brLOUDmOO2&amp;wx_header=1" target="_blank" rel="noopener">传送门</a>]<br>还有<code>@囧克斯</code>的译文作为参考:「如何撰写Git提交信息」→[<a href="https://jiongks.name/blog/git-commit/" target="_blank" rel="noopener">传送门</a>]</p></blockquote><p>git commit 信息应具有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Header&gt;</span><br><span class="line"></span><br><span class="line">&lt;Body&gt;</span><br><span class="line"></span><br><span class="line">&lt;Footer&gt;</span><br></pre></td></tr></table></figure></p><p>例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">说了半天不给个例子都是瞎扯淡，下面是一个完整的例子：</span><br><span class="line"></span><br><span class="line">&lt;Header&gt;</span><br><span class="line">feat: 添加了分享功能</span><br><span class="line"></span><br><span class="line">&lt;Body&gt;</span><br><span class="line">给每篇博文添加了分享功能</span><br><span class="line"></span><br><span class="line">- 添加分享到微博功能</span><br><span class="line"></span><br><span class="line">- 添加分享到微信功能</span><br><span class="line"></span><br><span class="line">- 添加分享到朋友圈功能</span><br><span class="line"></span><br><span class="line">&lt;Footer&gt;</span><br><span class="line">Issue #1, #2</span><br><span class="line"></span><br><span class="line">Close #1</span><br></pre></td></tr></table></figure></p><p><br>—— 2018.12.26更新 ——</p><h2 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a>Git操作</h2><blockquote><p>观看<code>「玩转git三剑客」</code>并新建<code>git-test</code>项目来进行<code>Git的深度学习</code></p></blockquote><p><br></p><h3 id="建Git仓库"><a href="#建Git仓库" class="headerlink" title="建Git仓库"></a>建Git仓库</h3><p>两种场景:</p><ol><li><p>已有代码构建Git仓库:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd 项目所在目录</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure></li><li><p>新建项目直接用Git管理:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd 某个文件夹</span><br><span class="line">$ git init project__name</span><br><span class="line">$ cd project__name</span><br></pre></td></tr></table></figure></li></ol><p><br></p><h3 id="Git基础命令"><a href="#Git基础命令" class="headerlink" title="Git基础命令"></a>Git基础命令</h3><h4 id="将编辑或修改过的文件提交到Git文件暂存区"><a href="#将编辑或修改过的文件提交到Git文件暂存区" class="headerlink" title="将编辑或修改过的文件提交到Git文件暂存区:"></a>将编辑或修改过的文件提交到<code>Git文件暂存区</code>:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">***.gitignore文件内添加的内容将不会提交到Git文件    暂存区***</span><br><span class="line">     </span><br><span class="line">*** 提交项目文件夹下单个文件 ***</span><br><span class="line">$ git add test.html</span><br><span class="line">    </span><br><span class="line">*** 提交项目文件夹下某个文件夹 ***</span><br><span class="line">$ git add text/</span><br><span class="line">    </span><br><span class="line">*** 提交已经提交过的文件或文件夹 ***</span><br><span class="line">$ git add -u</span><br><span class="line">    </span><br><span class="line">*** 提交项目文件夹内所有文件 ***</span><br><span class="line">$ git add . || $ gaa</span><br></pre></td></tr></table></figure><h4 id="查看Git文件暂存区-git-status-："><a href="#查看Git文件暂存区-git-status-：" class="headerlink" title="查看Git文件暂存区(git status)："></a>查看<code>Git文件暂存区</code>(git status)：</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status || $ gst</span><br></pre></td></tr></table></figure></code></pre><h4 id="为添加到Git文件暂存区的文件添加描述-git-commit"><a href="#为添加到Git文件暂存区的文件添加描述-git-commit" class="headerlink" title="为添加到Git文件暂存区的文件添加描述(git commit):"></a>为添加到<code>Git文件暂存区</code>的文件添加描述(git commit):</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*** 简单描述 ***</span><br><span class="line">$ git commit -m &apos;描述&apos;</span><br><span class="line">    </span><br><span class="line">*** 有规范的描述 ***</span><br><span class="line">$ git commit || $ gc</span><br><span class="line">进入vim编辑描述即可,描述内容参考上述的commit规范</span><br></pre></td></tr></table></figure><h4 id="已添加到Git文件暂存区文件进行重命名-git-mv"><a href="#已添加到Git文件暂存区文件进行重命名-git-mv" class="headerlink" title="已添加到Git文件暂存区文件进行重命名(git mv):"></a>已添加到<code>Git文件暂存区</code>文件进行重命名(git mv):</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*** 例如文件名A重命名为B ***</span><br><span class="line">    </span><br><span class="line">方法一 :</span><br><span class="line">1.直接修改项目文件夹内文件名并提交文件</span><br><span class="line">2.删除Git文件暂存区内原来的文件</span><br><span class="line"></span><br><span class="line">$ git add B</span><br><span class="line">$ git rm A</span><br><span class="line">*** 若想恢复之前的操作清理掉暂缓区内的东西即可 ***</span><br><span class="line">$ git reset --hard</span><br><span class="line">    </span><br><span class="line">方法二 :</span><br><span class="line">$ git mv A B</span><br><span class="line">    </span><br><span class="line">推荐方法为方法二</span><br></pre></td></tr></table></figure><h4 id="查看Git提交历史-git-log"><a href="#查看Git提交历史-git-log" class="headerlink" title="查看Git提交历史(git log):"></a>查看Git提交历史(git log):</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*** 查看完整历史 ***</span><br><span class="line">--- 默认展示当前分支 ---</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line">*** 若查看所有分支 ***</span><br><span class="line">--all</span><br><span class="line"></span><br><span class="line">*** 查看简述 ***</span><br><span class="line">--oneline</span><br><span class="line"></span><br><span class="line">*** 查找最近几次的历史 ***</span><br><span class="line">-n[math | 1,2,3,4]</span><br><span class="line">    </span><br><span class="line">*** 图形化 ***</span><br><span class="line">--graph</span><br></pre></td></tr></table></figure><h4 id="Git图形界面命令"><a href="#Git图形界面命令" class="headerlink" title="Git图形界面命令"></a>Git图形界面命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitk</span><br></pre></td></tr></table></figure><p><br>—— 2019.01.02更新 ——<br></p><h4 id="git目录-cat-file-命令查看文件"><a href="#git目录-cat-file-命令查看文件" class="headerlink" title=".git目录(cat-file 命令查看文件)"></a>.git目录(cat-file 命令查看文件)</h4><blockquote><p>  cat命令主要用来查看文件内容，创建文件，文件合并，追加文件内容等功能。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">*** .git文件夹里所包含的东西 ***</span><br><span class="line"></span><br><span class="line">•COMMIT_EDITMSG</span><br><span class="line">•config (当前 git 的配置文件)</span><br><span class="line">•description (仓库的描述信息文件)</span><br><span class="line">•HEAD (指向当前所在的分支)</span><br><span class="line">        例如 : 当前在 develop 分支,</span><br><span class="line">        实际指向地址是 refs/heads/develop</span><br><span class="line">    </span><br><span class="line">•hooks [文件夹]</span><br><span class="line">•index</span><br><span class="line">•info [文件夹]</span><br><span class="line">•logs [文件夹]</span><br><span class="line">•objects [文件夹] (存放所有的 git 对象)</span><br><span class="line">        对象哈希值前 2 位作为文件夹名称</span><br><span class="line">        后 38 位作为对象文件名,</span><br><span class="line">        可通过 git cat-file -p 命令,</span><br><span class="line">        拼接文件夹名称+文件名查看</span><br><span class="line">    </span><br><span class="line">•ORIG_HEAD</span><br><span class="line">•refs [文件夹] </span><br><span class="line">        有两个分支的情况下:</span><br><span class="line">        master  (master的文件)</span><br><span class="line">        test    (test的文件)</span><br><span class="line">    </span><br><span class="line">•heads (存放当前项目的所有分支)</span><br><span class="line">•tags (存放的当前项目的所有标签，又叫做里程碑)</span><br><span class="line">•cat 命令， 功能：用来显示文件。 例如 cat text.md 显示 text.md 文件的内容</span><br><span class="line">•ls -al 命令， 表示列出当前目录下的所有文件（包括隐藏文件）</span><br><span class="line"></span><br><span class="line">*** git cat-file 命令 ***</span><br><span class="line"></span><br><span class="line">•git cat-file -t 命令， 查看 git 对象的类型</span><br><span class="line">•git cat-file -p 命令， 查看 git 对象的内容</span><br><span class="line">•git cat-file -s 命令， 查看 git 对象的大小</span><br></pre></td></tr></table></figure><h2 id="commit、tree和blob对应关系"><a href="#commit、tree和blob对应关系" class="headerlink" title="commit、tree和blob对应关系"></a>commit、tree和blob对应关系</h2><blockquote><p>Git有3大对象,commit、tree和blob,它们之间对应关系类似于树.</p></blockquote><p>例如: 本次提交信息中新增了<code>index.html</code>文件和<code>style.css</code>文件以及<code>logo.png</code>图片文件,此时执行<code>git add .</code>命令之后,执行<code>git commit</code>填写完描述信息过后,会生成对应的commit文件.</p><pre><code>*** 此时结构应该如下 ***commit  [hash]Author: [yourName]Date:   [commitTime]    describe*** 输入 git cat-file -p [hash] 会出现如下信息***tree [hash-tree]parent [hash]*** 接着输入 git cat-file -p [hash-tree] 便能查看到blob和tree***tree [hash-tree-tree]blob [hash-tree-blob]*** 输入 git cat-file -p [hash-tree-blob] 即可查看到相信的文件内容***</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;版本控制器-Version-Control-Systems&quot;&gt;&lt;a href=&quot;#版本控制器-Version-Control-Systems&quot; class=&quot;headerlink&quot; title=&quot;版本控制器 (Version Control Systems)&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Router、webpack个人配置</title>
    <link href="http://yoursite.com/2018/12/21/vue-router/"/>
    <id>http://yoursite.com/2018/12/21/vue-router/</id>
    <published>2018-12-21T04:24:07.000Z</published>
    <updated>2018-12-21T06:17:11.331Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一些个人在vue构建项目中的router配置和webpack改动,仅在<code>vue-cli 3.0</code>版本下有效</p></blockquote><p><br></p><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><p>在项目初始化过程中,会涉及到配置路由，而在使用vue-router的过程中，需要注意vue的两种路由模式，一个是默认的hash路由，另一个是history路由。</p><p><br> 1. hash路由在路径后会带有一个#/<br>例如:localhost:8080/#/</p><p><br> 2. 而history路由则会将路径后的#/去掉,<br>例如:localhost:8080/</p><hr><p><br>具体配置信息如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在router.js文件中,添加</span><br><span class="line">mode:&apos;history&apos;,</span><br><span class="line">base:&apos;xxx&apos;</span><br><span class="line">这两行代码</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  mode: &apos;history&apos;,</span><br><span class="line">  base: &apos;/xxx/&apos;,</span><br><span class="line">  routes: [</span><br><span class="line">  ...</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><br>上述<code>base:&#39;xxx&#39;</code>中的<code>xxx</code>是在<code>vue-cli</code>创建的文件中的<code>config</code>文件夹下的<code>index.js</code>文件中,<code>build</code>这一行里进行配置的,找到该文件进行如下配置:<br><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">build&#123;</span><br><span class="line">    // Template for index.html</span><br><span class="line">    index: path.resolve(__dirname, &apos;../xxx/index.html&apos;),</span><br><span class="line"></span><br><span class="line">    // Paths</span><br><span class="line">    assetsRoot: path.resolve(__dirname, &apos;../xxx&apos;),</span><br><span class="line">    assetsSubDirectory: &apos;static&apos;,</span><br><span class="line">    assetsPublicPath: &apos;/xxx/&apos;,</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br></p><h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><p><br><br><br>  </p><h2 id="12-4日补充"><a href="#12-4日补充" class="headerlink" title="12.4日补充"></a>12.4日补充</h2><p>在使用vue-router模式进行页面切换时,会发现有时候,页面出现的位置并不是顶部,而是在其他位置,可以通过<code>scrollBehavior</code>这一函数去修改跳转路由后的页面初始位置。</p><p><br><strong>此方法仅在’histroy’模式下有用</strong><br></p><p><br>在<code>router</code>文件夹内的<code>index.js</code>文件添加如下配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">export default new Router(&#123;</span><br><span class="line">  mode: &apos;history&apos;,</span><br><span class="line">  base: &apos;/xxx/&apos;,</span><br><span class="line">  routes: [</span><br><span class="line">  ...</span><br><span class="line">  ],</span><br><span class="line">  scrollBehavior (to, from, savedPosition) &#123;</span><br><span class="line">    // return 期望滚动到哪个的位置</span><br><span class="line">    </span><br><span class="line">    // 1. return &#123; x:0, y:0&#125; 跳转路由后回到页面顶部</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><br></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><br></h2><p><br>  </p><h2 id="12-21补充"><a href="#12-21补充" class="headerlink" title="12.21补充"></a>12.21补充</h2><p>微信H5分享存在的问题:</p><ol><li>SPA应用History模式,由于每次路由并不会刷新,会导致获取微信签名失败,所以在SPA应用History模式下,想要做到多页面均可分享,需启用Hash路由模式.<br>参考(@yongheng2016的github分享):<a href="https://github.com/yongheng2016/blog/issues/78" target="_blank" rel="noopener">微信分享过程中遇到的问题总结（SPA/history模式）</a><br>如:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">mode:&apos;hash&apos;,</span><br><span class="line">base:&apos;xxx&apos;,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li>目前项目是用Hash路由解决了多页面分享的问题,下次碰到问题再解决</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一些个人在vue构建项目中的router配置和webpack改动,仅在&lt;code&gt;vue-cli 3.0&lt;/code&gt;版本下有效&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;vue-router&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Itrem2 oh-my-zsh git 快捷键</title>
    <link href="http://yoursite.com/2018/12/19/Itrem2%20oh-my-zsh%20git%20%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2018/12/19/Itrem2 oh-my-zsh git 快捷键/</id>
    <published>2018-12-19T07:24:07.000Z</published>
    <updated>2018-12-21T03:57:07.375Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在<code>oh-my-zsh</code>中<code>plugins</code>的<code>git</code>的快捷键,仅供记录查询</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"># Aliases</span><br><span class="line"># (sorted alphabetically)</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">alias g=&apos;git&apos;</span><br><span class="line"></span><br><span class="line">alias ga=&apos;git add&apos;</span><br><span class="line">alias gaa=&apos;git add --all&apos;</span><br><span class="line">alias gapa=&apos;git add --patch&apos;</span><br><span class="line">alias gau=&apos;git add --update&apos;</span><br><span class="line">alias gav=&apos;git add --verbose&apos;</span><br><span class="line">alias gap=&apos;git apply&apos;</span><br><span class="line"></span><br><span class="line">alias gb=&apos;git branch&apos;</span><br><span class="line">alias gba=&apos;git branch -a&apos;</span><br><span class="line">alias gbd=&apos;git branch -d&apos;</span><br><span class="line">alias gbda=&apos;git branch --no-color --merged | command grep -vE &quot;^(\*|\s*(master|develop|dev)\s*$)&quot; | command xargs -n 1 git branch -d&apos;</span><br><span class="line">alias gbD=&apos;git branch -D&apos;</span><br><span class="line">alias gbl=&apos;git blame -b -w&apos;</span><br><span class="line">alias gbnm=&apos;git branch --no-merged&apos;</span><br><span class="line">alias gbr=&apos;git branch --remote&apos;</span><br><span class="line">alias gbs=&apos;git bisect&apos;</span><br><span class="line">alias gbsb=&apos;git bisect bad&apos;</span><br><span class="line">alias gbsg=&apos;git bisect good&apos;</span><br><span class="line">alias gbsr=&apos;git bisect reset&apos;</span><br><span class="line">alias gbss=&apos;git bisect start&apos;</span><br><span class="line"></span><br><span class="line">alias gc=&apos;git commit -v&apos;</span><br><span class="line">alias gc!=&apos;git commit -v --amend&apos;</span><br><span class="line">alias gcn!=&apos;git commit -v --no-edit --amend&apos;</span><br><span class="line">alias gca=&apos;git commit -v -a&apos;</span><br><span class="line">alias gca!=&apos;git commit -v -a --amend&apos;</span><br><span class="line">alias gcan!=&apos;git commit -v -a --no-edit --amend&apos;</span><br><span class="line">alias gcans!=&apos;git commit -v -a -s --no-edit --amend&apos;</span><br><span class="line">alias gcam=&apos;git commit -a -m&apos;</span><br><span class="line">alias gcsm=&apos;git commit -s -m&apos;</span><br><span class="line">alias gcb=&apos;git checkout -b&apos;</span><br><span class="line">alias gcf=&apos;git config --list&apos;</span><br><span class="line">alias gcl=&apos;git clone --recurse-submodules&apos;</span><br><span class="line">alias gclean=&apos;git clean -fd&apos;</span><br><span class="line">alias gpristine=&apos;git reset --hard &amp;&amp; git clean -dfx&apos;</span><br><span class="line">alias gcm=&apos;git checkout master&apos;</span><br><span class="line">alias gcd=&apos;git checkout develop&apos;</span><br><span class="line">alias gcmsg=&apos;git commit -m&apos;</span><br><span class="line">alias gco=&apos;git checkout&apos;</span><br><span class="line">alias gcount=&apos;git shortlog -sn&apos;</span><br><span class="line">compdef _git gcount</span><br><span class="line">alias gcp=&apos;git cherry-pick&apos;</span><br><span class="line">alias gcpa=&apos;git cherry-pick --abort&apos;</span><br><span class="line">alias gcpc=&apos;git cherry-pick --continue&apos;</span><br><span class="line">alias gcs=&apos;git commit -S&apos;</span><br><span class="line"></span><br><span class="line">alias gd=&apos;git diff&apos;</span><br><span class="line">alias gdca=&apos;git diff --cached&apos;</span><br><span class="line">alias gdcw=&apos;git diff --cached --word-diff&apos;</span><br><span class="line">alias gdct=&apos;git describe --tags `git rev-list --tags --max-count=1`&apos;</span><br><span class="line">alias gds=&apos;git diff --staged&apos;</span><br><span class="line">alias gdt=&apos;git diff-tree --no-commit-id --name-only -r&apos;</span><br><span class="line">alias gdw=&apos;git diff --word-diff&apos;</span><br><span class="line"></span><br><span class="line">gdv() &#123; git diff -w &quot;$@&quot; | view - &#125;</span><br><span class="line">compdef _git gdv=git-diff</span><br><span class="line"></span><br><span class="line">alias gf=&apos;git fetch&apos;</span><br><span class="line">alias gfa=&apos;git fetch --all --prune&apos;</span><br><span class="line">alias gfo=&apos;git fetch origin&apos;</span><br><span class="line"></span><br><span class="line">function gfg() &#123; git ls-files | grep $@ &#125;</span><br><span class="line">compdef _grep gfg</span><br><span class="line"></span><br><span class="line">alias gg=&apos;git gui citool&apos;</span><br><span class="line">alias gga=&apos;git gui citool --amend&apos;</span><br><span class="line"></span><br><span class="line">ggf() &#123;</span><br><span class="line">  [[ &quot;$#&quot; != 1 ]] &amp;&amp; local b=&quot;$(git_current_branch)&quot;</span><br><span class="line">  git push --force origin &quot;$&#123;b:=$1&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">ggfl() &#123;</span><br><span class="line">[[ &quot;$#&quot; != 1 ]] &amp;&amp; local b=&quot;$(git_current_branch)&quot;</span><br><span class="line">git push --force-with-lease origin &quot;$&#123;b:=$1&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">compdef _git ggf=git-checkout</span><br><span class="line"></span><br><span class="line">ggl() &#123;</span><br><span class="line">  if [[ &quot;$#&quot; != 0 ]] &amp;&amp; [[ &quot;$#&quot; != 1 ]]; then</span><br><span class="line">    git pull origin &quot;$&#123;*&#125;&quot;</span><br><span class="line">  else</span><br><span class="line">    [[ &quot;$#&quot; == 0 ]] &amp;&amp; local b=&quot;$(git_current_branch)&quot;</span><br><span class="line">    git pull origin &quot;$&#123;b:=$1&#125;&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line">compdef _git ggl=git-checkout</span><br><span class="line"></span><br><span class="line">ggp() &#123;</span><br><span class="line">  if [[ &quot;$#&quot; != 0 ]] &amp;&amp; [[ &quot;$#&quot; != 1 ]]; then</span><br><span class="line">    git push origin &quot;$&#123;*&#125;&quot;</span><br><span class="line">  else</span><br><span class="line">    [[ &quot;$#&quot; == 0 ]] &amp;&amp; local b=&quot;$(git_current_branch)&quot;</span><br><span class="line">    git push origin &quot;$&#123;b:=$1&#125;&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line">compdef _git ggp=git-checkout</span><br><span class="line"></span><br><span class="line">ggpnp() &#123;</span><br><span class="line">  if [[ &quot;$#&quot; == 0 ]]; then</span><br><span class="line">    ggl &amp;&amp; ggp</span><br><span class="line">  else</span><br><span class="line">    ggl &quot;$&#123;*&#125;&quot; &amp;&amp; ggp &quot;$&#123;*&#125;&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line">compdef _git ggpnp=git-checkout</span><br><span class="line"></span><br><span class="line">ggu() &#123;</span><br><span class="line">  [[ &quot;$#&quot; != 1 ]] &amp;&amp; local b=&quot;$(git_current_branch)&quot;</span><br><span class="line">  git pull --rebase origin &quot;$&#123;b:=$1&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">compdef _git ggu=git-checkout</span><br><span class="line"></span><br><span class="line">alias ggpur=&apos;ggu&apos;</span><br><span class="line">compdef _git ggpur=git-checkout</span><br><span class="line"></span><br><span class="line">alias ggpull=&apos;git pull origin $(git_current_branch)&apos;</span><br><span class="line">compdef _git ggpull=git-checkout</span><br><span class="line"></span><br><span class="line">alias ggpush=&apos;git push origin $(git_current_branch)&apos;</span><br><span class="line">compdef _git ggpush=git-checkout</span><br><span class="line"></span><br><span class="line">alias ggsup=&apos;git branch --set-upstream-to=origin/$(git_current_branch)&apos;</span><br><span class="line">alias gpsup=&apos;git push --set-upstream origin $(git_current_branch)&apos;</span><br><span class="line"></span><br><span class="line">alias ghh=&apos;git help&apos;</span><br><span class="line"></span><br><span class="line">alias gignore=&apos;git update-index --assume-unchanged&apos;</span><br><span class="line">alias gignored=&apos;git ls-files -v | grep &quot;^[[:lower:]]&quot;&apos;</span><br><span class="line">alias git-svn-dcommit-push=&apos;git svn dcommit &amp;&amp; git push github master:svntrunk&apos;</span><br><span class="line">compdef _git git-svn-dcommit-push=git</span><br><span class="line"></span><br><span class="line">alias gk=&apos;\gitk --all --branches&apos;</span><br><span class="line">compdef _git gk=&apos;gitk&apos;</span><br><span class="line">alias gke=&apos;\gitk --all $(git log -g --pretty=%h)&apos;</span><br><span class="line">compdef _git gke=&apos;gitk&apos;</span><br><span class="line"></span><br><span class="line">alias gl=&apos;git pull&apos;</span><br><span class="line">alias glg=&apos;git log --stat&apos;</span><br><span class="line">alias glgp=&apos;git log --stat -p&apos;</span><br><span class="line">alias glgg=&apos;git log --graph&apos;</span><br><span class="line">alias glgga=&apos;git log --graph --decorate --all&apos;</span><br><span class="line">alias glgm=&apos;git log --graph --max-count=10&apos;</span><br><span class="line">alias glo=&apos;git log --oneline --decorate&apos;</span><br><span class="line">alias glol=&quot;git log --graph --pretty=&apos;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos;&quot;</span><br><span class="line">alias glols=&quot;git log --graph --pretty=&apos;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --stat&quot;</span><br><span class="line">alias glod=&quot;git log --graph --pretty=&apos;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)&lt;%an&gt;%Creset&apos;&quot;</span><br><span class="line">alias glods=&quot;git log --graph --pretty=&apos;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)&lt;%an&gt;%Creset&apos; --date=short&quot;</span><br><span class="line">alias glola=&quot;git log --graph --pretty=&apos;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --all&quot;</span><br><span class="line">alias glog=&apos;git log --oneline --decorate --graph&apos;</span><br><span class="line">alias gloga=&apos;git log --oneline --decorate --graph --all&apos;</span><br><span class="line">alias glp=&quot;_git_log_prettily&quot;</span><br><span class="line">compdef _git glp=git-log</span><br><span class="line"></span><br><span class="line">alias gm=&apos;git merge&apos;</span><br><span class="line">alias gmom=&apos;git merge origin/master&apos;</span><br><span class="line">alias gmt=&apos;git mergetool --no-prompt&apos;</span><br><span class="line">alias gmtvim=&apos;git mergetool --no-prompt --tool=vimdiff&apos;</span><br><span class="line">alias gmum=&apos;git merge upstream/master&apos;</span><br><span class="line">alias gma=&apos;git merge --abort&apos;</span><br><span class="line"></span><br><span class="line">alias gp=&apos;git push&apos;</span><br><span class="line">alias gpd=&apos;git push --dry-run&apos;</span><br><span class="line">alias gpf=&apos;git push --force-with-lease&apos;</span><br><span class="line">alias gpf!=&apos;git push --force&apos;</span><br><span class="line">alias gpoat=&apos;git push origin --all &amp;&amp; git push origin --tags&apos;</span><br><span class="line">compdef _git gpoat=git-push</span><br><span class="line">alias gpu=&apos;git push upstream&apos;</span><br><span class="line">alias gpv=&apos;git push -v&apos;</span><br><span class="line"></span><br><span class="line">alias gr=&apos;git remote&apos;</span><br><span class="line">alias gra=&apos;git remote add&apos;</span><br><span class="line">alias grb=&apos;git rebase&apos;</span><br><span class="line">alias grba=&apos;git rebase --abort&apos;</span><br><span class="line">alias grbc=&apos;git rebase --continue&apos;</span><br><span class="line">alias grbd=&apos;git rebase develop&apos;</span><br><span class="line">alias grbi=&apos;git rebase -i&apos;</span><br><span class="line">alias grbm=&apos;git rebase master&apos;</span><br><span class="line">alias grbs=&apos;git rebase --skip&apos;</span><br><span class="line">alias grh=&apos;git reset&apos;</span><br><span class="line">alias grhh=&apos;git reset --hard&apos;</span><br><span class="line">alias grm=&apos;git rm&apos;</span><br><span class="line">alias grmc=&apos;git rm --cached&apos;</span><br><span class="line">alias grmv=&apos;git remote rename&apos;</span><br><span class="line">alias grrm=&apos;git remote remove&apos;</span><br><span class="line">alias grset=&apos;git remote set-url&apos;</span><br><span class="line">alias grt=&apos;cd $(git rev-parse --show-toplevel || echo &quot;.&quot;)&apos;</span><br><span class="line">alias gru=&apos;git reset --&apos;</span><br><span class="line">alias grup=&apos;git remote update&apos;</span><br><span class="line">alias grv=&apos;git remote -v&apos;</span><br><span class="line"></span><br><span class="line">alias gsb=&apos;git status -sb&apos;</span><br><span class="line">alias gsd=&apos;git svn dcommit&apos;</span><br><span class="line">alias gsh=&apos;git show&apos;</span><br><span class="line">alias gsi=&apos;git submodule init&apos;</span><br><span class="line">alias gsps=&apos;git show --pretty=short --show-signature&apos;</span><br><span class="line">alias gsr=&apos;git svn rebase&apos;</span><br><span class="line">alias gss=&apos;git status -s&apos;</span><br><span class="line">alias gst=&apos;git status&apos;</span><br><span class="line">alias gsta=&apos;git stash save&apos;</span><br><span class="line">alias gstaa=&apos;git stash apply&apos;</span><br><span class="line">alias gstc=&apos;git stash clear&apos;</span><br><span class="line">alias gstd=&apos;git stash drop&apos;</span><br><span class="line">alias gstl=&apos;git stash list&apos;</span><br><span class="line">alias gstp=&apos;git stash pop&apos;</span><br><span class="line">alias gsts=&apos;git stash show --text&apos;</span><br><span class="line">alias gstall=&apos;git stash --all&apos;</span><br><span class="line">alias gsu=&apos;git submodule update&apos;</span><br><span class="line"></span><br><span class="line">alias gts=&apos;git tag -s&apos;</span><br><span class="line">alias gtv=&apos;git tag | sort -V&apos;</span><br><span class="line"></span><br><span class="line">alias gunignore=&apos;git update-index --no-assume-unchanged&apos;</span><br><span class="line">alias gunwip=&apos;git log -n 1 | grep -q -c &quot;\-\-wip\-\-&quot; &amp;&amp; git reset HEAD~1&apos;</span><br><span class="line">alias gup=&apos;git pull --rebase&apos;</span><br><span class="line">alias gupv=&apos;git pull --rebase -v&apos;</span><br><span class="line">alias gupa=&apos;git pull --rebase --autostash&apos;</span><br><span class="line">alias gupav=&apos;git pull --rebase --autostash -v&apos;</span><br><span class="line">alias glum=&apos;git pull upstream master&apos;</span><br><span class="line"></span><br><span class="line">alias gwch=&apos;git whatchanged -p --abbrev-commit --pretty=medium&apos;</span><br><span class="line">alias gwip=&apos;git add -A; git rm $(git ls-files --deleted) 2&gt; /dev/null; git commit --no-verify -m &quot;--wip-- [skip ci]&quot;&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在&lt;code&gt;oh-my-zsh&lt;/code&gt;中&lt;code&gt;plugins&lt;/code&gt;的&lt;code&gt;git&lt;/code&gt;的快捷键,仅供记录查询&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>ng、vue、react</title>
    <link href="http://yoursite.com/2018/11/19/ng%E3%80%81vue%E3%80%81react/"/>
    <id>http://yoursite.com/2018/11/19/ng、vue、react/</id>
    <published>2018-11-19T10:24:47.000Z</published>
    <updated>2018-12-21T06:13:04.700Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Ng 脏值检查</li><li>Vue 数据劫持</li></ol><p>脏值检查(angular.js实现双向绑定的基本原理):</p><blockquote><p>无法检测数据是否发生改变,必须通过一些特定的条件,在条件执行的时候,进行检测,如果数据改变,就执行更新方法</p></blockquote><p>例子:要检测公交车上的人数是否发生变化?</p><ol><li>setInterval</li><li>在公交车关门时,就可以检测在公交车上的人数是否发生变化</li></ol><p>数据劫持:(Object.defineProperty)</p><p>???</p><p>观察者模式(发布订阅模式)<br>例子:</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;Ng 脏值检查&lt;/li&gt;
&lt;li&gt;Vue 数据劫持&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;脏值检查(angular.js实现双向绑定的基本原理):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无法检测数据是否发生改变,必须通过一些特定的条件,在条件执行的时候,进行检测,如果数
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序CSS命名规范</title>
    <link href="http://yoursite.com/2018/05/17/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FCSS%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2018/05/17/微信小程序CSS命名规范/</id>
    <published>2018-05-17T03:18:36.000Z</published>
    <updated>2018-12-17T04:15:21.110Z</updated>
    
    <content type="html"><![CDATA[<h4 id="微信小程序CSS命名示例"><a href="#微信小程序CSS命名示例" class="headerlink" title="微信小程序CSS命名示例"></a>微信小程序CSS命名示例</h4><blockquote><p>小程序CSS命名方式尽量使用 BEM 命名 , Block+Element+Modify.</p></blockquote><p>例如:<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"view__container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">class</span>=<span class="string">"view__container__icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"view__container__text"</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="BEM规范"><a href="#BEM规范" class="headerlink" title="BEM规范"></a>BEM规范</h4><blockquote><p>BEM 即(block,element,modifier)的命名方式</p></blockquote><p>如:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-   中划线 ：仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。</span><br><span class="line">__  双下划线：双下划线用来连接块和块的子元素</span><br><span class="line">_   单下划线：单下划线用来描述一个块或者块的子元素的一种状态</span><br><span class="line">type-block__element_modifier</span><br></pre></td></tr></table></figure></p><h5 id="B-block-块"><a href="#B-block-块" class="headerlink" title="B (block) 块"></a>B (block) 块</h5><blockquote><p>就是一个块级元素,类似于树的顶层,可以根据具体的页面内容的容器来分,或者根据页面来分</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">可以把上述结构分解成2种</span><br><span class="line">1. html作为此页面的块级元素</span><br><span class="line">2. div标签作为p标签和span标签的块级元素</span><br><span class="line"></span><br><span class="line">一个块是设计或布局的一部分，它有具体且唯一地意义 ，要么是语义上的要么是视觉上的。</span><br><span class="line">不过一般我个人并不会以第一种方式来分页面的结构.</span><br><span class="line">我们可以在这个页面给html定义一个标识,如A(为此页面所有块级元素的前缀)</span><br><span class="line">则div的类名可以为A-wrapper</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"A-wrapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个块的正式（实际上是半正式的）定义有下面三个基本原则：</p><ol><li>CSS中只能使用类名（不能是ID）。</li><li>每一个块名应该有一个命名空间（前缀）</li><li>每一条CSS规则必须属于一个块。</li></ol><p>如上,css选择器则可为:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span>&#123;&#125;</span><br><span class="line"><span class="comment">/*或*/</span></span><br><span class="line"><span class="selector-class">.A-wrapper</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><h5 id="E-element-元素"><a href="#E-element-元素" class="headerlink" title="E (element) 元素"></a>E (element) 元素</h5><blockquote><p>块中的子元素是块的子元素，并且子元素的子元素在 bem 里也被认为是块的直接子元素。一个块中元素的类名必须用父级块的名称作为前缀。</p></blockquote><p>如上例子,<code>wrapper.text</code> 是上述p标签<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.text</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.wrapper__text</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><h5 id="M-modifier-修饰符"><a href="#M-modifier-修饰符" class="headerlink" title="M (modifier) 修饰符"></a>M (modifier) 修饰符</h5><blockquote><p>一个“修饰符”可以理解为一个块的特定状态，标识着它持有一个特定的属性。</p></blockquote><ul><li><p>用一个例子来解释最好不过了。一个表示按钮的块默认有三个大小：小，中，大。为了避免创建三个不同的块，最好是在块上加修饰符。这个修饰符应该有个名字（比如：size ）和值（ small，normal 或者 big ）。</p><ul><li>如上面的例子中，表示一个选中的列表，和一个激活的列表项</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span><span class="selector-class">.active</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.text</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.text</span><span class="selector-class">.active</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.wrapper_active</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.wrapper__text</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.wrapper__text_active</span>&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;微信小程序CSS命名示例&quot;&gt;&lt;a href=&quot;#微信小程序CSS命名示例&quot; class=&quot;headerlink&quot; title=&quot;微信小程序CSS命名示例&quot;&gt;&lt;/a&gt;微信小程序CSS命名示例&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;小程序CSS命名方式尽量使用 BE
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Cookie、Session、LocalStorage</title>
    <link href="http://yoursite.com/2018/02/24/Cookie%E3%80%81Seesion%E3%80%81LocalStorage/"/>
    <id>http://yoursite.com/2018/02/24/Cookie、Seesion、LocalStorage/</id>
    <published>2018-02-24T08:18:32.000Z</published>
    <updated>2018-02-24T09:02:51.684Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是一篇关于Cookie和Session还有LocalStorage和SessionStorage的总结的博客。<br>demo展示在:<a href="https://github.com/o0Chivas0o/demo/tree/master/node-demo/sign-up-demo" target="_blank" rel="noopener">https://github.com/o0Chivas0o/demo/tree/master/node-demo/sign-up-demo</a>      功能做的不是很完善,但是能帮助理解Cookie以及Session。</p></blockquote><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p><code>Cookie</code> 有几个特点,</p><ol><li>服务端通过<code>Set-Cookie</code>来设置Cookie,Cookie的本质就是一串字符串。</li><li>客户端得到这个字符串后，每次登陆这个网页，都会携带上这串字符串。</li><li>服务端再通过这串字符串去找到对应的隐私信息。</li><li>Cookie大小一般为4kb。</li><li>Cookie默认有失效时间，但是后台可以设置过期时间。</li></ol><p>因为<code>Cookie</code>可以篡改，而且是明文传输的，所以存在漏洞，<code>Session</code>就解决了这个问题。  </p><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><p><code>Session</code>的特点，</p><ol><li>一般来说，Session是基于Cookie来设置的一个哈希表。</li><li>将SessionId(随机数)通过Cookie发给服务端。</li><li>客户端访问服务器时，服务器读取SessionID。</li><li>服务器有一块内存(哈希表),存储了所有的Session。</li><li>通过SessionID，我们可以得到用户的隐私信息。</li><li>这块内存(哈希表)就是服务器上所有的Session。  </li></ol><h4 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h4><p><code>LocalStorage</code>的实质也是一个<code>hash</code>，它是html5标准提供的一个API，用来持久化存储一些不是那么重要的信息。  </p><p>它的特点,</p><ol><li>LocalStorage与HTTP无关。</li><li>HTTP不会带上LocalStorage。</li><li>只有相同的页面才能互相读取LocalStorage。</li><li>浏览器对每个域名分配的LocalStorage最大的存储量为5Mb左右。</li><li>记录一些无关紧要的信息，不记录用户敏感信息。</li><li>LocalStorage永久有效，除非用户清理缓存。  </li></ol><p>它与Cookie的区别就是，一个通过<code>Set-Cookie</code>设置，一个是HTML5提供的APi，<br>一个是通过HTTP设置，一个与HTTP无关。</p><h4 id="SessionStorage-会话窗口"><a href="#SessionStorage-会话窗口" class="headerlink" title="SessionStorage(会话窗口)"></a>SessionStorage(会话窗口)</h4><p><code>SessionStorage</code>与<code>Session</code>无关，同样，它也是浏览器提供的一个API。</p><p>它与<code>LocalStorage</code>一样,只有一点不一样，就是它的存储时间在用户关闭页面之后就会失效。</p><h4 id="cache-control-缓存管理"><a href="#cache-control-缓存管理" class="headerlink" title="cache-control(缓存管理)"></a>cache-control(缓存管理)</h4><p>可以通过在服务器设置<code>Cache-Control</code>来设置缓存时间，从而提高网页加载速度，提供更好的用户体验。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这是一篇关于Cookie和Session还有LocalStorage和SessionStorage的总结的博客。&lt;br&gt;demo展示在:&lt;a href=&quot;https://github.com/o0Chivas0o/demo/tree/master/
      
    
    </summary>
    
    
      <category term="HTTP&amp;JavaScript" scheme="http://yoursite.com/tags/HTTP-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS要点整理</title>
    <link href="http://yoursite.com/2018/02/09/JS%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2018/02/09/JS要点整理/</id>
    <published>2018-02-09T07:15:50.000Z</published>
    <updated>2018-02-09T15:28:30.243Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于近期学习的东西比较多，JS这一块的要点尤其多，而且杂，出于方便自己记忆和理解的原因，所以写下这篇总结，包括JS面试一些出现频率较高的知识点，我会在后期的学习不断更新这篇博客。</p></blockquote><h3 id="JS7种数据类型"><a href="#JS7种数据类型" class="headerlink" title="JS7种数据类型"></a>JS7种数据类型</h3><h4 id="简单类型"><a href="#简单类型" class="headerlink" title="简单类型"></a>简单类型</h4><p>null、undefined、string、number、boolean、symbol  </p><h4 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h4><p>object  </p><p>详见我的博客:<a href="https://o0chivas0o.github.io/2018/01/03/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/" target="_blank" rel="noopener">JS数据类型</a>  </p><h3 id="JS中的类型转换"><a href="#JS中的类型转换" class="headerlink" title="JS中的类型转换"></a>JS中的类型转换</h3><p>博客:<a href="https://o0chivas0o.github.io/2018/01/04/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%BA%8C/" target="_blank" rel="noopener">JS数据类型-二</a>  </p><p>博客中提到三种类型之间的互相转换，忘记的时候可以翻阅。  </p><h3 id="JS函数"><a href="#JS函数" class="headerlink" title="JS函数"></a>JS函数</h3><h3 id="JS数组"><a href="#JS数组" class="headerlink" title="JS数组"></a>JS数组</h3><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包总是和立即执行函数一起出现，立即执行函数是为了解决在命名变量时不使用全局变量，而闭包的精髓就是这个函数引用到了函数之外的变量。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">0</span> <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">window</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">return</span> a++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure></p><p>上述代码中 1 和 2 组成了一个闭包 这时用户可以使用 add()函数操作a，却不能直接访问到a变量，因为a在一个立即执行函数中。  </p><h3 id="原型、继承、new"><a href="#原型、继承、new" class="headerlink" title="原型、继承、new"></a>原型、继承、new</h3><h4 id="new的作用"><a href="#new的作用" class="headerlink" title="new的作用"></a>new的作用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params"></span>)</span>&#123;  <span class="comment">// 原型</span></span><br><span class="line">  walk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'walk'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  talk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'talk'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> human = <span class="keyword">new</span> Human(&#123;<span class="attr">name</span>:<span class="string">'lee'</span>,<span class="attr">city</span>:<span class="string">'wuhan'</span>&#125;)</span><br><span class="line"><span class="comment">// 这个过程</span></span><br><span class="line"><span class="comment">// function Human()&#123;</span></span><br><span class="line"><span class="comment">// var temp = &#123;&#125; 1</span></span><br><span class="line"><span class="comment">// this = temp   2</span></span><br><span class="line"><span class="comment">// this.__proto__ = Human.prototype 3</span></span><br><span class="line"><span class="comment">// this.name = 'lee'</span></span><br><span class="line"><span class="comment">// this.city = 'wuhan'</span></span><br><span class="line"><span class="comment">// return temp  4</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>上述代码中 1 2 3 4 就是new的过程<br>声明一个临时对象,将this指向临时对象,将临时对象的<strong>proto</strong>(原型链) 指向 原型的prototype(共有属性),返回这个临时对象<br>而其实中<code>this.name</code>和<code>this.city</code>就是这个new出来的对象的私有属性。</p><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>AJAX实际上只有4行代码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = xmlHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'/xxx'</span>,<span class="string">'post'</span>,<span class="literal">true</span>) <span class="comment">// 3个参数 url method boolean(是否异步)默认为true</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;  <span class="comment">// 请求是否加载完毕</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)&#123;  <span class="comment">// 判断响应状态是否成功</span></span><br><span class="line">      successfn.call(<span class="literal">undefined</span>,xhr.responseText) <span class="comment">// 成功就调用successFn(这是一个回调函数)</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(xhr.status &gt;= <span class="number">400</span>)&#123;     <span class="comment">// 失败状态</span></span><br><span class="line">      failFn.call(<span class="literal">undefined</span>,xhr.status) <span class="comment">// 调用failFn(同样是一个回调函数)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure></p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;由于近期学习的东西比较多，JS这一块的要点尤其多，而且杂，出于方便自己记忆和理解的原因，所以写下这篇总结，包括JS面试一些出现频率较高的知识点，我会在后期的学习不断更新这篇博客。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;JS7种数据类型
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>自己实现AJAX</title>
    <link href="http://yoursite.com/2018/01/29/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0AJAX/"/>
    <id>http://yoursite.com/2018/01/29/自己实现AJAX/</id>
    <published>2018-01-29T11:07:27.000Z</published>
    <updated>2018-01-29T13:34:36.542Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>　AJAX是一种实现在不刷新网页的情况下通过<code>XmlHttpRequest()</code>来访问服务器并根据数据的处理结果按照预期的方式对页面进行修改的技术。<br>AJAX即Async JavaScript And Xml 是异步的JS和Xml的技术。</p></blockquote><h4 id="AJAX的用法"><a href="#AJAX的用法" class="headerlink" title="AJAX的用法"></a>AJAX的用法</h4><p>核心只有4句话<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open()     </span><br><span class="line"><span class="comment">// open有3个参数 xhr.open('method','path',true)</span></span><br><span class="line"><span class="comment">// method 可以是GET POST DELETE PUT 等等 具体参考mdn</span></span><br><span class="line"><span class="comment">// path 就是获取网址的地址</span></span><br><span class="line"><span class="comment">// 第三个参数为boolean 可以选择同步 和 异步 默认为true 为异步</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'请求成功'</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(xhr.status &gt;= <span class="number">400</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'请求失败'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send()</span><br><span class="line"><span class="comment">// send 可以设置请求体 即请求的第四部分</span></span><br></pre></td></tr></table></figure></p><h4 id="有2个问题"><a href="#有2个问题" class="headerlink" title="有2个问题"></a>有2个问题</h4><h5 id="JS可以设置请求头吗"><a href="#JS可以设置请求头吗" class="headerlink" title="JS可以设置请求头吗"></a>JS可以设置请求头吗</h5><p>答案是可以  </p><h6 id="通过setRequestHeader-的方法可以设置请求头。"><a href="#通过setRequestHeader-的方法可以设置请求头。" class="headerlink" title="通过setRequestHeader()的方法可以设置请求头。"></a>通过<code>setRequestHeader()</code>的方法可以设置请求头。</h6><p>设置响应头有2个注意事项：  </p><ol><li><p>设置响应头需要在<code>open()</code>和<code>send()</code>之间。  </p></li><li><p>如设置多行,浏览器会合并成一行。  </p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'post'</span>,<span class="string">'/xxx'</span>,<span class="literal">true</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-from-encoded'</span>)</span><br><span class="line"><span class="comment">// 具体请看MDN </span></span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure><h6 id="通过send-可以设置请求的第四部分即请求体。"><a href="#通过send-可以设置请求的第四部分即请求体。" class="headerlink" title="通过send()可以设置请求的第四部分即请求体。"></a>通过<code>send()</code>可以设置请求的第四部分即请求体。</h6><p>一般如果是<code>GET</code>请求，浏览器会屏蔽第四部分，如果是<code>POST</code>请求，浏览器会展示出来。<br>具体查看方法:  </p><ol><li>打开浏览器控制台  </li></ol><p>2.点到<code>Network</code>,点到文件,点击<code>View Source</code>,就可以看到请求头,请求体了。</p><h5 id="JS可以读取响应的任何部分吗"><a href="#JS可以读取响应的任何部分吗" class="headerlink" title="JS可以读取响应的任何部分吗"></a>JS可以读取响应的任何部分吗</h5><p>答案也是可以的  </p><h6 id="JS可以通过以下方式获取响应任何部分。"><a href="#JS可以通过以下方式获取响应任何部分。" class="headerlink" title="JS可以通过以下方式获取响应任何部分。"></a>JS可以通过以下方式获取响应任何部分。</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.status      <span class="comment">// 获取状态码</span></span><br><span class="line">xhr.statusText  <span class="comment">// 获取状态码描述</span></span><br><span class="line">xhr.getResponseHeader()     <span class="comment">// 获取响应头</span></span><br><span class="line">xhr.getAllResponseHeaders() <span class="comment">// 获取所有响应头</span></span><br><span class="line">xhr.responseText <span class="comment">// 获取响应描述即后台的 response.write()中的内容</span></span><br></pre></td></tr></table></figure><h4 id="封装自己的AJAX"><a href="#封装自己的AJAX" class="headerlink" title="封装自己的AJAX"></a>封装自己的AJAX</h4><h5 id="第一次封装"><a href="#第一次封装" class="headerlink" title="第一次封装"></a>第一次封装</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jquery = <span class="function"><span class="keyword">function</span>(<span class="params">nodeOrSelector</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nodes = &#123;</span><br><span class="line">    <span class="number">0</span>:nodeOrSelector,</span><br><span class="line">    length:<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  nodes.addClass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  ndoes.text = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> nodes</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.$ = <span class="built_in">window</span>.jquery</span><br><span class="line"><span class="built_in">window</span>.jquery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">url,method,requestBody,successFn,failFn,headers</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  xhr.open(method,url)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> headers)&#123;</span><br><span class="line">    <span class="keyword">let</span> value = headers[key]</span><br><span class="line">    xhr.setRequestHeader(key,value)</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">        successfn.call(<span class="literal">undefined</span>,xhr.responseText)</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(xhr.status &gt;= <span class="number">400</span>)&#123;</span><br><span class="line">        failFn.call(<span class="literal">undefined</span>,xhr.status)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.send(requestBody)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法 假设有一个按钮id为button</span></span><br><span class="line"><span class="keyword">let</span> button = <span class="built_in">document</span>.querySector(<span class="string">'button'</span>)</span><br><span class="line">button.addEventListener(click,(e)=&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> f1 = <span class="function">(<span class="params">x</span>)=&gt;</span>successFn.call(<span class="literal">undefined</span>,x)</span><br><span class="line">  <span class="keyword">let</span> f2 = <span class="function">(<span class="params">x</span>)=&gt;</span>&#123;<span class="built_in">console</span>.log(x.status)&#125;</span><br><span class="line">  <span class="built_in">window</span>.jquery.ajax(<span class="string">'/xxx'</span>, <span class="string">'post'</span>, <span class="string">'a=1&amp;&amp;b=2'</span>,f1,f2,<span class="literal">null</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这个方法设置有一个缺点,传参很乱容易写出别人无法理解的函数比如没有<code>请求体</code>和<code>设置请求头</code>的<br><code>window.jquery.ajax(&#39;get&#39;,&#39;/xxx&#39;,null,null,successFn,failFn)</code>这样不好,容易忘,所以来优化一下代码。  </p></blockquote><h6 id="第一次优化"><a href="#第一次优化" class="headerlink" title="第一次优化"></a>第一次优化</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面全一样</span></span><br><span class="line"><span class="built_in">window</span>.jquery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> url = options.url</span><br><span class="line">  <span class="keyword">let</span> method = options.method</span><br><span class="line">  <span class="keyword">let</span> requestBody = options.requestBody</span><br><span class="line">  <span class="keyword">let</span> successFn = options.successFn</span><br><span class="line">  <span class="keyword">let</span> failFn = options.failFn</span><br><span class="line">  <span class="keyword">let</span> headers = options.headers</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  xhr.open(method,url)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> headers)&#123;</span><br><span class="line">    <span class="keyword">let</span> value = headers[key]</span><br><span class="line">    xhr.setRequestHeader(key,value)</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">        successfn.call(<span class="literal">undefined</span>,xhr.responseText)</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(xhr.status &gt;= <span class="number">400</span>)&#123;</span><br><span class="line">        failFn.call(<span class="literal">undefined</span>,xhr.status)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.send(requestBody)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 把变量以对象的形式调用 就不会出现上面那种尴尬的形式了</span></span><br><span class="line"><span class="built_in">window</span>.jquery.ajax(&#123;</span><br><span class="line">  <span class="string">'url'</span>:<span class="string">'/xxx'</span>,</span><br><span class="line">  <span class="string">'method'</span>:<span class="string">'post'</span>,</span><br><span class="line">  <span class="string">'requestBody'</span>:<span class="string">'a=1&amp;&amp;b=2'</span>,</span><br><span class="line">  <span class="string">'headers'</span>:&#123;</span><br><span class="line">    <span class="string">'lee'</span>:<span class="number">18</span>  <span class="comment">// 可以设置任何请求头</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 两个回调函数</span></span><br><span class="line">  <span class="string">'successFn'</span>:<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</span><br><span class="line">      f1.call(<span class="literal">undefined</span>,x)</span><br><span class="line">      f2.call(<span class="literal">undefined</span>,x)</span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="string">'failFn'</span>:<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(x)</span><br><span class="line">          <span class="built_in">console</span>.log(x.status)</span><br><span class="line">          <span class="built_in">console</span>.log(x.responseText)</span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h6 id="第二次优化"><a href="#第二次优化" class="headerlink" title="第二次优化"></a>第二次优化</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构赋值</span></span><br><span class="line"><span class="comment">// 把上面6个let 以下面形式 声明</span></span><br><span class="line"><span class="keyword">let</span> &#123;url,method,headers,successFn,failFn,requestBody&#125; = options</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次优化</span></span><br><span class="line"><span class="comment">// 这样就可以了</span></span><br><span class="line"><span class="built_in">window</span>.jquery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;url,method,headers,successFn,failFn,requestBody&#125;</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="Promise形式的封装"><a href="#Promise形式的封装" class="headerlink" title="Promise形式的封装"></a>Promise形式的封装</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jquery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;url,method,requestBody,headers&#125;</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">      xhr.open(method,url)</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> headers)&#123;</span><br><span class="line">        <span class="keyword">let</span> value = headers[key]</span><br><span class="line">        xhr.setRequestHeader(key,value)</span><br><span class="line">      &#125;</span><br><span class="line">      xhr.onreadystatechange = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">            resolve.call(<span class="literal">undefined</span>,xhr.responseText)</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(xhr.status &gt;= <span class="number">400</span>)&#123;</span><br><span class="line">            reject.call(<span class="literal">undefined</span>,xhr.status)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      xhr.send(requestBody)    </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="built_in">window</span>.jquery.ajax(&#123;</span><br><span class="line">  <span class="string">'url'</span>:<span class="string">'/xxx'</span>,</span><br><span class="line">  <span class="string">'method'</span>:<span class="string">'post'</span>,</span><br><span class="line">  <span class="string">'requestBody'</span>:<span class="string">'a=1&amp;&amp;b=2'</span>,</span><br><span class="line">  <span class="string">'headers'</span>:&#123;</span><br><span class="line">    <span class="string">'lee'</span>:<span class="number">18</span>  <span class="comment">// 可以设置任何请求头</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).then(</span><br><span class="line">    (text)=&gt;&#123;<span class="built_in">console</span>.log(text)&#125;, <span class="comment">// resolve</span></span><br><span class="line">    (xhr)=&gt;&#123;<span class="built_in">console</span>.log(xhr)&#125;    <span class="comment">// reject</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>以上就是我个人封装AJAX的方法。<br>同时我们还可以通过JSONP、img、iframe、link、的方法来与后台沟通刷新页面数据。  </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;　AJAX是一种实现在不刷新网页的情况下通过&lt;code&gt;XmlHttpRequest()&lt;/code&gt;来访问服务器并根据数据的处理结果按照预期的方式对页面进行修改的技术。&lt;br&gt;AJAX即Async JavaScript And Xml 是异步的J
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>立即执行函数</title>
    <link href="http://yoursite.com/2018/01/26/%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/01/26/立即执行函数/</id>
    <published>2018-01-26T08:00:04.000Z</published>
    <updated>2018-01-26T09:12:30.859Z</updated>
    
    <content type="html"><![CDATA[<h3 id="立即执行函数是什么"><a href="#立即执行函数是什么" class="headerlink" title="立即执行函数是什么?"></a>立即执行函数是什么?</h3><p>立即执行函数就是</p><ol><li>声明一个匿名函数</li><li>马上调用这个匿名函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line">function ()&#123;</span><br><span class="line">console.log(&apos;我是匿名函数&apos;)   //声明了一个匿名函数</span><br><span class="line">&#125;</span><br><span class="line">)   // 用括号包起来</span><br><span class="line">()  // 调用此函数</span><br></pre></td></tr></table></figure><p>上面是一个典型的立即执行函数。</p><ul><li>首先声明一个匿名函数 function(){console.log(‘我是匿名函数’)}。</li><li>然后在匿名函数后面接一对括号 ()，调用这个匿名函数。</li></ul><p><strong>用括号把函数包起来其实是为了防止浏览器报错</strong></p><p>如果我们直接写成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function()&#123;console.log(&apos;我是匿名函数&apos;)&#125;()</span><br></pre></td></tr></table></figure><p>浏览器会报语法错误。如果想通过浏览器的语法检查，我们可以在函数前添加一些运算符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!function()&#123;console.log(&apos;我是匿名函数&apos;)&#125;() // 求反，本身的值是undefined，求反之后浏览器反馈的就是true</span><br><span class="line">~function()&#123;console.log(&apos;我是匿名函数&apos;)&#125;()</span><br><span class="line">+function()&#123;console.log(&apos;我是匿名函数&apos;)&#125;()</span><br><span class="line">-function()&#123;console.log(&apos;我是匿名函数&apos;)&#125;()</span><br><span class="line">(function()&#123;console.log(&apos;我是匿名函数&apos;)&#125;()) // 用()把整个函数表达式包起来</span><br><span class="line">(function()&#123;console.log(&apos;我是匿名函数&apos;)&#125;)()  // 用()把函数包起来</span><br></pre></td></tr></table></figure><hr><h3 id="立即执行函数有什么用"><a href="#立即执行函数有什么用" class="headerlink" title="立即执行函数有什么用"></a>立即执行函数有什么用</h3><p>只有一个作用:<strong>创建一个独立的作用域</strong></p><p>这个作用域里面的变量，外面访问不到。</p><hr><h3 id="什么是匿名函数"><a href="#什么是匿名函数" class="headerlink" title="什么是匿名函数"></a>什么是匿名函数</h3><p><strong>匿名函数</strong>:（英语：anonymous function）是指一类无需定义标识符（函数名）的函数或子程序，普遍存在于多种编程语言中。<br>例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert((function(x)&#123;</span><br><span class="line">return x*x;</span><br><span class="line">&#125;)(10)); // 提示100</span><br></pre></td></tr></table></figure></p><hr><ul><li>参考链接：<a href="https://zhuanlan.zhihu.com/p/22465092" target="_blank" rel="noopener">「每日一题」什么是立即执行函数？有什么作用？</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;立即执行函数是什么&quot;&gt;&lt;a href=&quot;#立即执行函数是什么&quot; class=&quot;headerlink&quot; title=&quot;立即执行函数是什么?&quot;&gt;&lt;/a&gt;立即执行函数是什么?&lt;/h3&gt;&lt;p&gt;立即执行函数就是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;声明一个匿名函数&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>自己实现一个jQuery</title>
    <link href="http://yoursite.com/2018/01/19/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAjQuery/"/>
    <id>http://yoursite.com/2018/01/19/自己实现一个jQuery/</id>
    <published>2018-01-19T07:53:23.000Z</published>
    <updated>2018-01-19T09:48:31.383Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首先有必要介绍一下jQuery，据<a href="https://trends.builtwith.com/javascript/" target="_blank" rel="noopener">统计</a>在市面上近70%的公司的页面使用了jQuery这个库，所以还是有必要了解一下jQuery的使用方法以及一些特性。</p></blockquote><h3 id="jQuery的文档"><a href="#jQuery的文档" class="headerlink" title="jQuery的文档"></a>jQuery的文档</h3><h4 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h4><p><a href="http://api.jquery.com/" target="_blank" rel="noopener">http://api.jquery.com/</a></p><h4 id="译文地址"><a href="#译文地址" class="headerlink" title="译文地址"></a>译文地址</h4><p><a href="https://www.jquery123.com/" target="_blank" rel="noopener">https://www.jquery123.com/</a> </p><h3 id="jQuery的类型"><a href="#jQuery的类型" class="headerlink" title="jQuery的类型"></a>jQuery的类型</h3><p>在页面引入jQuery之后用在控制台输入<code>typeof jQuery</code>得到的结果是<code>&#39;function&#39;</code><br><img src="//i.loli.net/2018/01/19/5a61a8b42d761.jpg" alt=""></p><p>所以jQuery的类型就是一个函数,那么既然jQuery是一个函数,我就可以用利用这个结果封装一个自己的简易的jQuery。</p><h3 id="自己封装一个简单的jQuery"><a href="#自己封装一个简单的jQuery" class="headerlink" title="自己封装一个简单的jQuery"></a>自己封装一个简单的jQuery</h3><h4 id="封装一个函数"><a href="#封装一个函数" class="headerlink" title="封装一个函数"></a>封装一个函数</h4><p>node.getSiblings()<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSiblings</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> allChildren = node.parentNode.children</span><br><span class="line">  <span class="keyword">let</span> array = &#123;</span><br><span class="line">    length: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allChildren.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (allChildren[i] !== node) &#123;</span><br><span class="line">      array[array.length] = allChildren[i] <span class="comment">// 让输出的伪数组不包含本元素</span></span><br><span class="line">      array.length += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//例如 li.getSiblings.call(li)</span></span><br></pre></td></tr></table></figure></p><h4 id="封装第二个函数"><a href="#封装第二个函数" class="headerlink" title="封装第二个函数"></a>封装第二个函数</h4><p>node.addClass()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function addClass(node, classes) &#123;</span><br><span class="line">  classes.forEach( (value) =&gt; node.classList.add(value) ) </span><br><span class="line">  //遍历节点 给所有节点添加或者单个节点添加类名</span><br><span class="line">&#125;</span><br><span class="line">  //例如 li.addClass.call(li,[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])</span><br></pre></td></tr></table></figure></p><h4 id="命名问题"><a href="#命名问题" class="headerlink" title="命名问题"></a>命名问题</h4><blockquote><p>封装了一个函数总不能告诉大家 我今天写了一个库比较好用,大家都来用node.xxxx(),node.xx()来用这个库吧,所以需要一个命名空间。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> leeDom = &#123;&#125;  <span class="comment">// 声明一个新对象</span></span><br><span class="line">leeDom.getSiblings(node) </span><br><span class="line">leeDom.addClass(node, [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line"><span class="comment">// 把函数挂到对象下 引用方式直接leeDom.XXX()即可调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 然而我又觉得写leeDom很麻烦,要6个字符,所以我可以设置一个alisa</span></span><br><span class="line"><span class="built_in">window</span>.$ = leeDom</span><br><span class="line"><span class="comment">//这样是不是就很像jquery了?</span></span><br></pre></td></tr></table></figure><h4 id="我想把node放到前面怎么办"><a href="#我想把node放到前面怎么办" class="headerlink" title="我想把node放到前面怎么办?"></a>我想把node放到前面怎么办?</h4><p>类似于<code>li.addClass(&#39;hi&#39;)</code>这种更像jquery的写法。</p><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h5><p>扩展 Node 接口<br>直接在 Node.prototype 上加函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Node.prototype.addClass = <span class="function"><span class="keyword">function</span>(<span class="params">classes</span>)</span>&#123;</span><br><span class="line">  classes.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;node.classList.add(value)&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这样就可以通过 li.addClass('hi') 这样的方式来操作了</span></span><br><span class="line"><span class="comment">// 不过这样直接在原型链上修改不推荐,谁知道你会不会把别人写的函数给覆盖了,</span></span><br><span class="line"><span class="comment">// 或者把原本的函数给覆盖了</span></span><br></pre></td></tr></table></figure></p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二:"></a>方法二:</h5><p>新的接口 BetterNode<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node2</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        element: node,</span><br><span class="line">        getSiblings: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        addClass: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> node =<span class="built_in">document</span>.getElementById(<span class="string">'x'</span>)</span><br><span class="line"><span class="keyword">let</span> node2 = Node2(node)</span><br><span class="line">node2.getSiblings()</span><br><span class="line">node2.addClass()</span><br><span class="line"><span class="comment">// 这样可以完全避免在Node接口上操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把Node 2 改成jQuery</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jQuery</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        element: node,</span><br><span class="line">        getSiblings: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        addClass: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再来一个alisa</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.$ = jQuery</span><br></pre></td></tr></table></figure></p><h4 id="给自己写的jQuery添加text-功能"><a href="#给自己写的jQuery添加text-功能" class="headerlink" title="给自己写的jQuery添加text()功能"></a>给自己写的jQuery添加text()功能</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodeOrSelector</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nodes = &#123;&#125;</span><br><span class="line">  <span class="comment">// 判断输入类型</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> nodeOrSelector === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="comment">// 输出的是伪数组</span></span><br><span class="line">    <span class="keyword">let</span> temp = <span class="built_in">document</span>.querySelectorAll(nodeOrSelector)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">      nodes[i] = temp[i]</span><br><span class="line">    &#125;</span><br><span class="line">    nodes.length = temp.length</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nodeOrSelector <span class="keyword">instanceof</span> Node) &#123;</span><br><span class="line">    <span class="comment">// 为了一致性 也输出伪数组</span></span><br><span class="line">    nodes = &#123;</span><br><span class="line">      <span class="number">0</span>: nodeOrSelector,</span><br><span class="line">      length: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  nodes.getSiblings = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  nodes.addClass = <span class="function"><span class="keyword">function</span>(<span class="params">classes</span>) </span>&#123;</span><br><span class="line">    classes.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodes.length; i++)&#123;</span><br><span class="line">        nodes[i].classList.add(value)                                           &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  nodes.getText = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> texts = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ;i&lt;nodes.length;i++)&#123;</span><br><span class="line">      texts.push(nodes[i].textContent)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> texts</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  nodes.setText = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;nodes.length;i++)&#123;</span><br><span class="line">      nodes[i].textContent = text</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> nodes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我觉得jquery的好处不仅仅把很难操作的DOM变得容易操作了,还有他的链式操作也是很精髓的,比如<br><code>$(#div).addClass(&#39;active&#39;).removeClass(&#39;highlight&#39;)</code>这样的操作,这种操作经常在CSS中用来切换样式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;首先有必要介绍一下jQuery，据&lt;a href=&quot;https://trends.builtwith.com/javascript/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;统计&lt;/a&gt;在市面上近70%的公司的页面使用了jQ
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>DOM的增删改查</title>
    <link href="http://yoursite.com/2018/01/10/DOM%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://yoursite.com/2018/01/10/DOM的增删改查/</id>
    <published>2018-01-10T14:39:15.000Z</published>
    <updated>2018-01-10T16:52:59.511Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>DOM 全称是 Document Object Model，也就是文档对象模型。DOM是针对<code>HTML</code>和<code>XML</code>文档的一个<code>API</code>(应用程序编程接口)。DOM秒回了一个层次化的节点数，允许开发人员添加、移除和修页面的某一部分。DOM脱胎于<code>Netscape</code>及微软公司创始的DHTML(动态HTML)，单现在它已经成为表现和操作页面标记的真正跨平台、语言中立的方式。 —- 《JavaScript高级程序设计》</p></blockquote><h3 id="几个需要了解的前置知识"><a href="#几个需要了解的前置知识" class="headerlink" title="几个需要了解的前置知识"></a>几个需要了解的前置知识</h3><ul><li>节点层次<blockquote><p>DOM可以将任何HTML或XML文档秒回成一个由多层节点构成的结构。即DOM结构把HTML结构抽象成一个树形结构。</p></blockquote></li></ul><p>以一段HTML为例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Document--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>                       </span><br><span class="line"><span class="comment">&lt;!--Element html  根节点 即root节点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Element head--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Element title--&gt;</span></span><br><span class="line">            Example</span><br><span class="line">            <span class="comment">&lt;!--Text Example--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Element body--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Element div--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--Element span--&gt;</span></span><br><span class="line">                你好</span><br><span class="line">                <span class="comment">&lt;!--Text 你好--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>通过上面的方法可以将这个简单的HTML文档表示为一个层次结构。</p><ul><li>节点类型(nodeType)<blockquote><p>节点一共有12种不同类型，包括已经弃用的5个节点。<br>详见MDN <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType</a></p></blockquote></li></ul><h3 id="DOM有什么用"><a href="#DOM有什么用" class="headerlink" title="DOM有什么用"></a>DOM有什么用</h3><p>可以通过操作DOM修改页面内容<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"xxx"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">let xxx = document.getElementById('xxx')</span></span><br><span class="line"><span class="undefined">xxx.innerText = "你好"</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>上述通过<code>document.getElementById()</code>API来获取到HTML文件中ID为<code>xxx</code>的元素的节点</li><li>通过<code>Node.innerText</code>API来改变ID为<code>xxx</code>元素里的内容</li><li>由此可见,我们可以通过操作DOM来修改页面内容(虽然DOM API真的很难用)</li></ul><h3 id="DOM增删改查的方法"><a href="#DOM增删改查的方法" class="headerlink" title="DOM增删改查的方法"></a>DOM增删改查的方法</h3><ul><li>添加元素</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">Document.createElement()</td><td style="text-align:center">创建元素</td></tr><tr><td style="text-align:center">Document.createTextNode()</td><td style="text-align:center">创建一个新的文本节点</td></tr><tr><td style="text-align:center">Document.createAttribute()</td><td style="text-align:center">创建并返回一个新的属性节点</td></tr><tr><td style="text-align:center">Document.createComment()</td><td style="text-align:center">创建并返回一个注释节点</td></tr><tr><td style="text-align:center">Document.createDocumentFragment()</td><td style="text-align:center">创建一个新的空的文档片段</td></tr></tbody></table><ul><li>删除元素</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">Element.removeAttribute()</td><td style="text-align:center">从元素中删除指定的属性</td></tr><tr><td style="text-align:center">Element.removeChild()</td><td style="text-align:center">删除子元素</td></tr><tr><td style="text-align:center">ChildNode.remove()</td><td style="text-align:center">删除元素</td></tr><tr><td style="text-align:center">Child.parentNode.removeChild(child)</td><td style="text-align:center">不确定父元素时可这样删除子元素</td></tr></tbody></table><ul><li>修改元素</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">Node.innerText</td><td style="text-align:center">修改元素文本内容</td></tr><tr><td style="text-align:center">Element.innerHTML</td><td style="text-align:center">设置或获取描述元素后代的HTML语句</td></tr><tr><td style="text-align:center">node.cloneNode()</td><td style="text-align:center">拷贝元素(包括所有属性和值)</td></tr><tr><td style="text-align:center">Element.setAttribute()</td><td style="text-align:center">设置或者改变指定属性并指定值</td></tr><tr><td style="text-align:center">style.property = new style</td><td style="text-align:center">修改元素CSS属性值</td></tr><tr><td style="text-align:center">Node.replaceChild()</td><td style="text-align:center">替换子节点</td></tr><tr><td style="text-align:center">Node.classList.add()</td><td style="text-align:center">给指定元素添加一个class</td></tr><tr><td style="text-align:center">Node.classList.remove()</td><td style="text-align:center">给指定元素删除一个class</td></tr></tbody></table><ul><li>查找元素</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">attribute.getAttribute()</td><td style="text-align:center">返回元素的指定属性值</td></tr><tr><td style="text-align:center">Document.getElementsByClassName()</td><td style="text-align:center">返回一个节点列表（数组），包含了所有拥有指定 class 的子元素</td></tr><tr><td style="text-align:center">Document.getElementsByName()</td><td style="text-align:center">返回带有指定名称的对象集合</td></tr><tr><td style="text-align:center">Document.getElementsByTagName()</td><td style="text-align:center">返回带有指定标签名的对象集合</td></tr><tr><td style="text-align:center">Document.getElementById()</td><td style="text-align:center">返回对拥有指定id的元素引用</td></tr><tr><td style="text-align:center">Document.querySelector()</td><td style="text-align:center">返回文档中匹配指定的CSS选择器的第一元素</td></tr><tr><td style="text-align:center">Document.querySelectorAll()</td><td style="text-align:center">返回与指定的选择器组匹配的文档中的元素列表</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>DOM API难操作,东西太多太杂,而且很反人类,在实际工作中,我推荐还是使用jQuery来做操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;DOM 全称是 Document Object Model，也就是文档对象模型。DOM是针对&lt;code&gt;HTML&lt;/code&gt;和&lt;code&gt;XML&lt;/code&gt;文档的一个&lt;code&gt;API&lt;/code&gt;(应用程序编程接口)。DOM秒回了一个层次化的
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>冒泡与捕获</title>
    <link href="http://yoursite.com/2018/01/10/%E5%86%92%E6%B3%A1%E4%B8%8E%E6%8D%95%E8%8E%B7/"/>
    <id>http://yoursite.com/2018/01/10/冒泡与捕获/</id>
    <published>2018-01-10T13:28:47.000Z</published>
    <updated>2018-01-10T13:31:58.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="冒泡与捕获"><a href="#冒泡与捕获" class="headerlink" title="冒泡与捕获"></a>冒泡与捕获</h1><p>冒泡与捕获是DOM事件的一种事件机制，也是一种事件流。</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>1.操作系统最先知道鼠标点击，浏览器次之，因为操作系统是权限最高的软件。</p><p>2.在一个页面里面，子元素被点击，意味着父元素也被点击了。<br><img src="https://ooo.0o0.ooo/2017/06/15/5942135b1db13.jpg" alt=""></p><blockquote><p><em>图中 不论我的鼠标放在红色或绿色的div中，只要点击都会显示最外层div也同时被点击了。</em></p></blockquote><p>3.如果我同时监听了 child 和 parent，那么谁先通知我？这是个问题。</p><h2 id="捕获阶段"><a href="#捕获阶段" class="headerlink" title="捕获阶段"></a>捕获阶段</h2><blockquote><p>parent 先通知，child 后通知。</p></blockquote><p><img src="https://ooo.0o0.ooo/2017/06/15/594216872bb01.jpg" alt=""><br><em>如图，输出结果依次为先点击红色区域，再点击绿色区域。</em></p><h2 id="冒泡阶段"><a href="#冒泡阶段" class="headerlink" title="冒泡阶段"></a>冒泡阶段</h2><blockquote><p>child 先通知，parent 后通知</p></blockquote><p>onclick 就是在冒泡阶段被通知</p><blockquote><p>IE 一开始就支持冒泡。</p></blockquote><p><img src="https://ooo.0o0.ooo/2017/06/15/59421767c3236.jpg" alt=""><br><em>如图，输出结果依次为先点击红色区域，再点击绿色区域。</em></p><h2 id="W3C事件模型"><a href="#W3C事件模型" class="headerlink" title="W3C事件模型"></a>W3C事件模型</h2><p>支持两种:<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">button.addEventListener(&apos;click&apos;, fn, true) // 捕获 Capture Phase</span><br><span class="line">button.addEventListener(&apos;click&apos;, fn)       // 冒泡 Bubbling Phase</span><br></pre></td></tr></table></figure></p><p><img src="http://pij.robinqu.me/Browser_Scripting/DOM_Scripting/eventflow.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;冒泡与捕获&quot;&gt;&lt;a href=&quot;#冒泡与捕获&quot; class=&quot;headerlink&quot; title=&quot;冒泡与捕获&quot;&gt;&lt;/a&gt;冒泡与捕获&lt;/h1&gt;&lt;p&gt;冒泡与捕获是DOM事件的一种事件机制，也是一种事件流。&lt;/p&gt;
&lt;h3 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS数据类型(二)</title>
    <link href="http://yoursite.com/2018/01/04/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%BA%8C/"/>
    <id>http://yoursite.com/2018/01/04/JS数据类型-二/</id>
    <published>2018-01-04T09:42:47.000Z</published>
    <updated>2018-01-04T14:44:38.282Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在我的<a href="https://o0chivas0o.github.io/2018/01/03/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/" target="_blank" rel="noopener">JS数据类型(一)</a>中介绍了7种JS的基本类型，这次就说一下JS几种数据类型的转换。</p></blockquote><h4 id="其他类型转String类型"><a href="#其他类型转String类型" class="headerlink" title="其他类型转String类型"></a>其他类型转<code>String</code>类型</h4><p>方法一:<br>toString()方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数字类型转String</span></span><br><span class="line">(<span class="number">1</span>).toSting() <span class="comment">// "1" 如果写1.toString浏览器会报错,要写成这种形式或者</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">1</span> </span><br><span class="line">n.toString()  <span class="comment">// "1" 这是数字类型转String的两种写法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Boolean类型转String</span></span><br><span class="line"><span class="literal">true</span>.toString() <span class="comment">// "true" Boolean类型可以直接这样写。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Object类型转String</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line">a.toString() <span class="comment">// "[object Object]" 这种方式不是我们想得到的结果，</span></span><br><span class="line">             <span class="comment">// 我们想要得到的是 key 和 value 对应的字符串形式展现出来</span></span><br><span class="line">             <span class="comment">// 但是JS中只有这一个办法可以将复杂类型转换为字符串</span></span><br><span class="line">             <span class="comment">// 想要得到 key value 对应的形式 自己封装函数</span></span><br></pre></td></tr></table></figure></p><p><code>null</code>类型 和 <code>undefined</code>类型在方法一种会报错 </p><p>方法二:<br>window.string()<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.string(<span class="number">1</span>)         <span class="comment">// "1"</span></span><br><span class="line"><span class="built_in">window</span>.string(<span class="literal">true</span>)      <span class="comment">// "true"</span></span><br><span class="line"><span class="built_in">window</span>.string(<span class="literal">null</span>)      <span class="comment">// "null"</span></span><br><span class="line"><span class="built_in">window</span>.string(<span class="literal">undefined</span>) <span class="comment">// "undefined"</span></span><br><span class="line"><span class="built_in">window</span>.string(&#123;&#125;)        <span class="comment">// "[object Object]"</span></span><br></pre></td></tr></table></figure></p><p>window.string()方法可以将<code>null</code>和<code>undefined</code>类型转换为字符串。</p><p>方法三:<br> <code>其他类型</code>+’’<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="string">''</span>         <span class="comment">// "1"</span></span><br><span class="line"><span class="literal">true</span> + <span class="string">''</span>      <span class="comment">// "true"</span></span><br><span class="line"><span class="literal">null</span> + <span class="string">''</span>      <span class="comment">// "null"</span></span><br><span class="line"><span class="literal">undefined</span> + <span class="string">''</span> <span class="comment">// "undefined"</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line">a + <span class="string">''</span>         <span class="comment">// "[object Object]"</span></span><br></pre></td></tr></table></figure></p><p>方法三是方法二的简化版，浏览器会尝试把第一个值变为字符串与空字符串相加，得到的结果就是字符串，方法三在对<code>null</code>和<code>undefined</code>转换时不会报错。</p><h4 id="将其他类型转换为Number类型"><a href="#将其他类型转换为Number类型" class="headerlink" title="将其他类型转换为Number类型"></a>将其他类型转换为<code>Number</code>类型</h4><p>方法一：<br>Number():<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">'1'</span>)     <span class="comment">// 得到数字 1 </span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'1.1'</span>)   <span class="comment">// 得到数字 1.1</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'1.1e2'</span>) <span class="comment">// 得到数字 110</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'0b11'</span>)  <span class="comment">// 得到数字 3</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'011'</span>)   <span class="comment">// 得到数字 11</span></span><br></pre></td></tr></table></figure></p><p>这里要特别说明一下 为什么<code>Number(011)</code>得出的结果是11而不是9，这是JS的一个BUG。</p><p>方法二：<br>parseInt(string,radix)方法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">'1'</span>,<span class="number">10</span>)     <span class="comment">// 得到数字 1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'1.1'</span>,<span class="number">10</span>)   <span class="comment">// 得到数字 1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'1.1e2'</span>,<span class="number">10</span>) <span class="comment">// 得到数字 1 </span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'011'</span>,<span class="number">8</span>)    <span class="comment">// 得到数字 9</span></span><br></pre></td></tr></table></figure></p><p><code>parseInt()</code>方法可以用来进制间的转换,同时可以将<code>String</code>转换成<code>Number</code>类型。</p><p>方法三:<br>parseFloat(value)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>(<span class="string">'1.1'</span>)   <span class="comment">// 得到数字 1.1</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">'1.1e2'</span>) <span class="comment">// 得到数字 110</span></span><br></pre></td></tr></table></figure></p><p>parseFloat()方法可以用来转化小数。</p><p>方法四：<br>‘String’ - 0<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'1'</span> - <span class="number">0</span>        <span class="comment">// 得到数字 1</span></span><br><span class="line"><span class="string">'1.1'</span> - <span class="number">0</span>      <span class="comment">// 得到数字 1.1</span></span><br><span class="line"><span class="string">'1.1e2'</span> - <span class="number">0</span>    <span class="comment">// 得到数字 110</span></span><br></pre></td></tr></table></figure></p><p>方法五:</p><ul><li>‘String’</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+<span class="string">'1'</span>       <span class="comment">// 得到数字 1</span></span><br><span class="line">+<span class="string">'1.1'</span>     <span class="comment">// 得到数字 1.1</span></span><br><span class="line">+<span class="string">'1.1e2'</span>   <span class="comment">// 得到数字 110</span></span><br></pre></td></tr></table></figure><p>注意所有的将String方法转为Number类型必须是’数字’的形式如’1’、’1.1’、’1.1e2’，如果是其他字符串’true’、’a’、’b’，都会转换成NaN。</p><h4 id="其他类型转Boolean类型"><a href="#其他类型转Boolean类型" class="headerlink" title="其他类型转Boolean类型"></a>其他类型转<code>Boolean</code>类型</h4><p>直接取反2次就可以将其他类型转换成<code>Boolean</code>类型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">!!<span class="number">0</span>          <span class="comment">// false</span></span><br><span class="line">!!<span class="literal">NaN</span>        <span class="comment">// false</span></span><br><span class="line">!!<span class="literal">null</span>       <span class="comment">// false</span></span><br><span class="line">!!<span class="literal">undefined</span>  <span class="comment">// false</span></span><br><span class="line">!!<span class="string">''</span>         <span class="comment">// false</span></span><br><span class="line">!!&#123;&#125;         <span class="comment">// true</span></span><br><span class="line">!![]         <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>只需记住6个假值分别是<code>false</code>、<code>null</code>、<code>undefined</code>、<code>&#39;&#39;</code>(空字符串)、<code>NaN</code>、<code>0</code>,这6个假值,其他一切都是真值。</p><hr><p>这就是我总结的几种类型之间的转换方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在我的&lt;a href=&quot;https://o0chivas0o.github.io/2018/01/03/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS数据类型(一)</title>
    <link href="http://yoursite.com/2018/01/03/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/01/03/JS数据类型/</id>
    <published>2018-01-03T14:47:30.000Z</published>
    <updated>2018-01-04T14:47:46.155Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JS有7种数据类型，其中又分基本类型(简单类型)和复杂类型，复杂类型由基本类型组成。</p></blockquote><h4 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h4><table><thead><tr><th style="text-align:center">二进制</th><th style="text-align:center">八进制</th><th style="text-align:center">十进制</th><th style="text-align:center">十六进制</th></tr></thead><tbody><tr><td style="text-align:center">一般以0b开头</td><td style="text-align:center">一般以0开头</td><td style="text-align:center">1 , 1.1 , .1</td><td style="text-align:center">以0X开头</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">js中一般可以.1表示1.1,可以用到科学计数法。</span><br><span class="line"></span><br><span class="line">1 + .1 === 1 + 1.1// 1.1</span><br><span class="line"></span><br><span class="line">1.23e2 // 123</span><br></pre></td></tr></table></figure><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;你好&apos;,&quot;你好&quot;,&apos;&apos;,&quot;&quot;,&apos; &apos;,&quot; &quot;,都是字符串。</span><br><span class="line">空字符串的length属性为0,而空格字符串的length属性是1。</span><br></pre></td></tr></table></figure><p>在JS中，有个符号叫做转义符号是<code>\</code>,它的作用有:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'\`'</span> <span class="comment">// a = ' 表示单引号</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">"\\"</span> <span class="comment">// b = \ 表示转义符</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="string">'\n'</span> <span class="comment">// c表示回车</span></span><br><span class="line"><span class="keyword">let</span> d = <span class="string">'\t'</span> <span class="comment">// d = "  " 表示tab(制表符)</span></span><br></pre></td></tr></table></figure></p><p>多行字符串(不是字符里有回车):<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'12345 \</span></span><br><span class="line"><span class="string">67890'</span>     <span class="comment">// 这个写法是正确的,但是不推荐,因为一旦转义符号后有空格浏览器就会报错</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="string">'12345'</span>+</span><br><span class="line"><span class="string">'67890'</span>   <span class="comment">// 这个写法也是正确的。</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">`12345</span></span><br><span class="line"><span class="string">67890`</span>    <span class="comment">// 这是符合ES6语法的,在模板字符串里面表示的空格和回车都会被显示出来。</span></span><br><span class="line"><span class="keyword">let</span> s3 = <span class="string">'12345\            </span></span><br><span class="line"><span class="string">67890'</span>   <span class="comment">// s3 会报错 因为s3 第一行后面有空格</span></span><br></pre></td></tr></table></figure></p><h4 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h4><p><code>boolean</code>类型只有2个值，一个是<code>true</code>，一个是<code>false</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = ture </span><br><span class="line"><span class="keyword">if</span>( a === ture)&#123;   <span class="comment">// 执行 因为a为true</span></span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span>(b === ture)&#123;    <span class="comment">// 不执行 因为b为false </span></span><br><span class="line">  <span class="built_in">console</span>.log(b)   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中还有<code>&amp;&amp;</code>(与运算),<code>||</code>(或运算),<code>!</code>(取反运算)。</p><p>与运算,只要有一个为false,所有值为false:</p><table><thead><tr><th>a&amp;&amp;b</th><th>true</th><th>false</th></tr></thead><tbody><tr><td>true</td><td>true</td><td>false</td></tr><tr><td>false</td><td>false</td><td>false</td></tr></tbody></table><p>或运算,只要有一个为true,所有值为true:<br><code>||</code>符号打出来制表有点问题,用<code>或</code>代替<code>||</code></p><table><thead><tr><th style="text-align:center">a或b</th><th style="text-align:center">true</th><th style="text-align:center">false</th></tr></thead><tbody><tr><td style="text-align:center">true</td><td style="text-align:center">true</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">false</td><td style="text-align:center">true</td><td style="text-align:center">false</td></tr></tbody></table><p>取反运算,一般用来将其他数据类型转换为<code>boolean</code>数据类型:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">!true  // false</span><br><span class="line">!false // true</span><br><span class="line">![]    // false</span><br><span class="line">!![]   // true</span><br><span class="line">!0     // true</span><br><span class="line">!!0    // false</span><br><span class="line">!1     // false</span><br><span class="line">!!1    // true</span><br><span class="line">!2     // false</span><br><span class="line">!!2    // true</span><br></pre></td></tr></table></figure></p><h4 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a>Null类型</h4><p> null类型只有一个属性就是null.</p><h4 id="Undefined类型"><a href="#Undefined类型" class="headerlink" title="Undefined类型"></a>Undefined类型</h4><p> undefined类型也只有一个属性为undfined.</p><p> <code>null</code> 和 <code>undefined</code> 都表示什么也没有 是JS之父设计JS的BUG。<br> 其中有2点值得说明一下。<br> 1.变量声明没有赋值时，一般用undefined。<br> 2.有一个对象，但是现在不想赋值，一般用null。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n          <span class="comment">// n为undefined 声明了没有赋值</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="literal">null</span> <span class="comment">// obj为null obj为一个对象,但是不想赋值。</span></span><br></pre></td></tr></table></figure><p>一般惯例是 <code>null</code> 表示空对象，<code>undefined</code> 表示空非对象。</p><h4 id="Symbol类型"><a href="#Symbol类型" class="headerlink" title="Symbol类型"></a>Symbol类型</h4><p>  暂时不写。</p><p>以上6种为简单类型</p><hr><h4 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h4><p> object为复杂类型，由以上6种基本类型组成。<br> Array和Function不是基本类型，都属于Object类型。</p><ul><li><p>对象的声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'lee'</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line"><span class="comment">//上面这种相关属性可以写到一个对象里,即:</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">   <span class="string">'name'</span>:<span class="string">'lee'</span>,</span><br><span class="line">   <span class="string">'age'</span>:<span class="number">18</span>,    <span class="comment">//其中这个逗号在ES3(IE7以下)的时候不可写,但是ES5(IE8以下)支持这种语法了。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上面这种写法还可以写成</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name:<span class="string">'lee'</span>,</span><br><span class="line">  age:<span class="number">18</span>,       <span class="comment">//对象默认左边key值为字符串,加不加引号,都不会出错,</span></span><br><span class="line">                <span class="comment">// 但是右边value属性只能是字符串或者数字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>读对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"> name:<span class="string">'lee'</span>,    <span class="comment">// 对象里可以是String类型</span></span><br><span class="line"> age:<span class="number">18</span>,        <span class="comment">// 对象里也可以是Number类型</span></span><br><span class="line"> married:<span class="literal">false</span>, <span class="comment">// 对象里还可以是Boolean类型</span></span><br><span class="line"> children:&#123;     <span class="comment">// 对象里可以是对象</span></span><br><span class="line">   name:xxx,</span><br><span class="line">   age:<span class="number">1</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对象还可以是他自己:</span></span><br><span class="line"><span class="keyword">let</span> person</span><br><span class="line">person = &#123;<span class="attr">self</span>:person&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person[<span class="string">'name'</span>] <span class="comment">//这是正确的读取属性写法,在符合标识符情况下,还可以</span></span><br><span class="line">person.name    <span class="comment">//用这种写法来读取属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person[name]   <span class="comment">//这是错误的写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'fuck'</span>  </span><br><span class="line">person[name] === person[<span class="string">'fuck'</span>]  <span class="comment">//值为undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// key 可以是空字符串'',</span></span><br><span class="line"><span class="comment">// 但不能是字符串与数字的组合例如'8a','a8','1a2',</span></span><br><span class="line"><span class="comment">// 这种类似的 key 想要使用,必须用''或者""引号括起来。</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>删除对象属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name:<span class="string">'lee'</span>,    </span><br><span class="line">  age:<span class="number">18</span>,      </span><br><span class="line">  married:<span class="literal">false</span>, </span><br><span class="line">  children:&#123;     </span><br><span class="line">    name:xxx,</span><br><span class="line">    age:<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person[<span class="string">'children'</span>] </span><br><span class="line">person[<span class="string">'children'</span>]     <span class="comment">//再次访问children的属性则为undefined 无value</span></span><br><span class="line"><span class="string">'children'</span> <span class="keyword">in</span> person   <span class="comment">// false  无key</span></span><br><span class="line"><span class="comment">//另一种方法</span></span><br><span class="line">person[<span class="string">'children'</span>] = <span class="literal">undefined</span> <span class="comment">// 无value</span></span><br><span class="line"><span class="string">'children'</span> <span class="keyword">in</span> person           <span class="comment">// true 有key</span></span><br></pre></td></tr></table></figure></li><li><p><code>for...in</code>遍历对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;<span class="attr">name</span>:<span class="string">'lee'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> person)&#123;    <span class="comment">// 遍历key</span></span><br><span class="line">  <span class="built_in">console</span>.log(key)         <span class="comment">// key 可以是name先出现,也可以是age先出现 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> person)&#123;    <span class="comment">// 遍历key的值,即key对应的value</span></span><br><span class="line">  <span class="built_in">console</span>.log(person[key]) <span class="comment">// 这种是正确的写法,</span></span><br><span class="line">                           <span class="comment">// person['key']和person.key是错误的写法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> person)&#123;    <span class="comment">// 遍历key和对应的value</span></span><br><span class="line">  <span class="built_in">console</span>.log(key,person[key]) <span class="comment">// 浏览器会弹出key名 和value对应的字符串或者数字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p>有一个<code>typeof</code>方法可以查询基本类型是什么,但是有2个BUG：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'你好'</span></span><br><span class="line"><span class="keyword">typeof</span> a <span class="comment">// "string"</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span> </span><br><span class="line"><span class="keyword">typeof</span> b <span class="comment">// "number"</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="literal">true</span></span><br><span class="line"><span class="keyword">typeof</span> c <span class="comment">// "boolean"</span></span><br><span class="line"><span class="keyword">let</span> d = <span class="literal">undefined</span> </span><br><span class="line"><span class="keyword">typeof</span> d <span class="comment">// "undefined"</span></span><br><span class="line"><span class="keyword">let</span> e = <span class="literal">null</span></span><br><span class="line"><span class="keyword">typeof</span> e <span class="comment">// "object" 这是第一个BUG,理论上应该返回null</span></span><br><span class="line"><span class="keyword">let</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">typeof</span> f <span class="comment">// "function" 这是第二个BUG,理论上应该返回object</span></span><br><span class="line"><span class="keyword">let</span> j = &#123;&#125;</span><br><span class="line"><span class="keyword">typeof</span> j <span class="comment">// "object"</span></span><br><span class="line"><span class="keyword">let</span> h = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">typeof</span> j <span class="comment">// "symbol"</span></span><br></pre></td></tr></table></figure></p><p>这就是JS的7种数据类型，我认为JS之父说的一句话很好，『原创之处并不优秀，优秀之处并非原创』，一起继续学习，继续改进。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;JS有7种数据类型，其中又分基本类型(简单类型)和复杂类型，复杂类型由基本类型组成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Number类型&quot;&gt;&lt;a href=&quot;#Number类型&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>函数的声明方法</title>
    <link href="http://yoursite.com/2017/12/26/%E5%87%BD%E6%95%B0%E7%9A%84%E5%A3%B0%E6%98%8E%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/12/26/函数的声明方法/</id>
    <published>2017-12-26T15:46:17.000Z</published>
    <updated>2018-01-16T06:25:45.552Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数的声明方法"><a href="#函数的声明方法" class="headerlink" title="函数的声明方法"></a>函数的声明方法</h3><p>在JavaScript中函数一共有<strong>三种</strong>声明方法。</p><h4 id="function-命令-声明一个具名函数"><a href="#function-命令-声明一个具名函数" class="headerlink" title="function()命令)(声明一个具名函数)"></a>function()命令)(声明一个<code>具名函数</code>)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function 函数名(e)&#123;</span><br><span class="line">   console.log(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中function命令声明的代码区块，就是一个函数。function后的就是函数名，如果一个函数没有函数名就是匿名函数。函数名之后就是一对括号，用来传递函数的参数.函数体放在大括号里面。<strong>这种声明方式，函数名必须要写，如果不写的话无法调用。</strong></p><p><br></p><hr><h4 id="函数表达式-变量赋值"><a href="#函数表达式-变量赋值" class="headerlink" title="函数表达式(变量赋值)"></a>函数表达式(变量赋值)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function ()&#123;&#125; // 直接声明匿名函数会报错</span><br><span class="line"></span><br><span class="line">var Fn = function (e)&#123; // 需要把匿名函数传给一个变量,下次引用才能用得到,JS不允许有无意义的声明</span><br><span class="line">   console.log(e)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>:该表达式右侧function不带有函数名。如果加上函数名,该函数名只在函数体内部有效，在函数体外部有效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var Fn = function i()&#123;</span><br><span class="line">console.log(typeof i);</span><br><span class="line">&#125;;</span><br><span class="line">// ReferenceError: x is not defined</span><br><span class="line">//因为i也是一个变量，需要声明之后才能使用。</span><br><span class="line"></span><br><span class="line">Fn()</span><br><span class="line">// function</span><br></pre></td></tr></table></figure><p>或者直接把函数名变为变量名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var i = function i ()&#123;&#125; ;</span><br></pre></td></tr></table></figure><p>需要注意的是，函数的表达式需要在语句的结尾加上分号，表示语句结束。<br><br></p><hr><h4 id="Function构造函数"><a href="#Function构造函数" class="headerlink" title="Function构造函数"></a>Function构造函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Function(&apos;p1&apos;,&apos;p2&apos;,&apos;functionBody&apos;)</span><br><span class="line">// p1,p2 是arguments functionBody 是函数体</span><br><span class="line">var a </span><br><span class="line">a = Function(&apos;x&apos;,&apos;y&apos;,&apos;return x+y&apos;)</span><br></pre></td></tr></table></figure><p>这种写起来很麻烦 而且一般很少人用。<br><br></p><hr><p>函数一般在函数体内不写return的话浏览器会自动补全，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function s()&#123;&#125;</span><br><span class="line"></span><br><span class="line">function s()&#123;</span><br><span class="line">  return undefined //浏览器会自动补上这一句话</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以一般typeof没有返回值的函数的值都是undefined。<br><br></p><hr><ul><li>参考链接:<a href="http://javascript.ruanyifeng.com/grammar/function.html#toc1" target="_blank" rel="noopener">JavaScript 标准参考教程（alpha）</a></li></ul><hr><p><br></p><h3 id="另外补充两种方法"><a href="#另外补充两种方法" class="headerlink" title="另外补充两种方法"></a>另外补充两种方法</h3><h4 id="匿名函数的声明"><a href="#匿名函数的声明" class="headerlink" title="匿名函数的声明"></a>匿名函数的声明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var x</span><br><span class="line">x = function()&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="箭头函数的声明"><a href="#箭头函数的声明" class="headerlink" title="箭头函数的声明"></a>箭头函数的声明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var a</span><br><span class="line">a = (x+y) =&gt; &#123;return x+y&#125;</span><br><span class="line">//可以简写成</span><br><span class="line">a = (x+y) =&gt; x+y</span><br><span class="line"></span><br><span class="line">当只有一个参数时</span><br><span class="line">var b</span><br><span class="line">b = (x) =&gt; &#123;return x*x&#125;</span><br><span class="line">//可以简写成</span><br><span class="line">b = x =&gt; x*x</span><br></pre></td></tr></table></figure><p>箭头函数都是匿名的</p><h4 id="函数表达式和function-命令有一些区别需要提一下"><a href="#函数表达式和function-命令有一些区别需要提一下" class="headerlink" title="函数表达式和function()命令有一些区别需要提一下"></a>函数表达式和<code>function()</code>命令有一些区别需要提一下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function y()&#123;&#125;</span><br><span class="line">console.log(y) // function y()&#123;&#125;</span><br><span class="line">var a = function x()&#123;&#125;</span><br><span class="line">console.log(x) // x is not defined</span><br><span class="line"></span><br><span class="line">//JS的不一致性</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;函数的声明方法&quot;&gt;&lt;a href=&quot;#函数的声明方法&quot; class=&quot;headerlink&quot; title=&quot;函数的声明方法&quot;&gt;&lt;/a&gt;函数的声明方法&lt;/h3&gt;&lt;p&gt;在JavaScript中函数一共有&lt;strong&gt;三种&lt;/strong&gt;声明方法。&lt;/p&gt;
&lt;h4 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="http://yoursite.com/2017/12/19/flex%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2017/12/19/flex布局/</id>
    <published>2017-12-19T08:20:45.000Z</published>
    <updated>2017-12-19T10:14:55.994Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>网页布局一直是CSS的一个重点应用,布局的传统方法是基于盒模型,依赖<code>display</code>属性+<code>position</code>属性+<code>float</code>属性。它对于那些特殊布局方法非常不方便,比如,垂直居中。<br>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p></blockquote><h3 id="Flex是什么"><a href="#Flex是什么" class="headerlink" title="Flex是什么"></a>Flex是什么</h3><p>Flex 是Flexible Box的缩写,意味着弹性布局,它可以应用到任意一个容器上。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">display</span>:flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也可以应用到行内元素上:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line"><span class="attribute">display</span>:inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>设置Flex布局后，子元素的<code>clear</code>属性和<code>float</code>属性和<code>vertical-align</code>将失效。</p><h3 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">以下6个属性设置在容器中:</span><br><span class="line"> - flex-direction</span><br><span class="line"> - flex-wrap</span><br><span class="line"> - flex-flow</span><br><span class="line"> - justify-content</span><br><span class="line"> - align-items</span><br><span class="line"> - align-content</span><br></pre></td></tr></table></figure><p>1.flex-direction属性</p><ul><li><code>flex-direction</code> 属性指定了内部元素是如何在 flex 容器中布局的，定义了主轴的方向(正方向或反方向)。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">flex-direction</span>:row;&#125;           <span class="comment">/* 主轴为水平方向，起点在左端。 */</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">flex-direction</span>:row-reverse;&#125;    <span class="comment">/* 主轴为水平方向，起点在右端。 */</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">flex-direction</span>:column;&#125;         <span class="comment">/* 主轴为垂直方向，起点在上沿。 */</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">flex-direction</span>:column-reverse;&#125; <span class="comment">/* 主轴为垂直方向，起点在下沿。 */</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/12/19/5a38d32228407.png" alt=""></p><p>2.flex-wrap属性</p><ul><li><code>flex-wrap</code> 是指定 flex 元素单行显示还是多行显示 。如果允许换行，这个属性允许你控制行的堆叠方向。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">flex-wrap</span>:nowrap;&#125;          <span class="comment">/*nowrap（默认）：不换行。*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">flex-wrap</span>:wrap;&#125;            <span class="comment">/*wrap：换行，第一行在上方。*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">flex-wrap</span>:wrap-reverse;&#125;    <span class="comment">/*wrap-reverse：换行，第一行在下方。*/</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/12/19/5a38d65fae9ff.jpeg" alt=""></p><p>3.flex-flow</p><ul><li><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">flex-flow</span>: row nowrap;&#125;</span><br></pre></td></tr></table></figure><p>4.justify-content属性</p><ul><li><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">justify-content</span>: flex-start;&#125;     <span class="comment">/*flex-start（默认值）：左对齐*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">justify-content</span>: flex-end&#125;        <span class="comment">/*flex-end：右对齐*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">justify-content</span>: center&#125;          <span class="comment">/*center： 居中*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">justify-content</span>: space-between&#125;   </span><br><span class="line"><span class="comment">/*space-between：两端对齐，项目之间的间隔都相等。*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">justify-content</span>: space-around;&#125;   </span><br><span class="line"><span class="comment">/*space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。*/</span></span><br></pre></td></tr></table></figure><ul><li>具体参考 <a href="http://js.jirengu.com/rokij" target="_blank" rel="noopener">http://js.jirengu.com/rokij</a> 除了以上5种，还有其他属性，兼容性未测试。</li></ul><p>5.align-items属性</p><ul><li><code>align-items</code>属性定义项目在交叉轴上如何对齐。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">align-items</span>: flex-start;&#125;  <span class="comment">/*flex-start：交叉轴的起点对齐。*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">align-items</span>: flex-end;&#125;    <span class="comment">/*flex-end：交叉轴的终点对齐。*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">align-items</span>: center;&#125;      <span class="comment">/*center：交叉轴的中点对齐。*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">align-items</span>: baseline;&#125;    <span class="comment">/*baseline: 项目的第一行文字的基线对齐。*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">align-items</span>: stretch;&#125;     </span><br><span class="line"><span class="comment">/*stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。*/</span></span><br></pre></td></tr></table></figure><ul><li>具体参考 <a href="http://js.jirengu.com/vagor" target="_blank" rel="noopener">http://js.jirengu.com/vagor</a> 除了以上5种，还有其他属性，兼容性未测试。</li></ul><p>6.align-content属性</p><ul><li><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">align-content</span>:flex-start;&#125;     <span class="comment">/*flex-start：与交叉轴的起点对齐。  */</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">align-content</span>:flex-end;&#125;       <span class="comment">/*flex-end：与交叉轴的终点对齐。*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">align-content</span>:center;&#125;         <span class="comment">/*center：与交叉轴的中点对齐。*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">align-content</span>:space-between;&#125;  </span><br><span class="line"><span class="comment">/*space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">align-content</span>:space-around;&#125;   </span><br><span class="line"><span class="comment">/*space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">align-content</span>:stretch;&#125;        <span class="comment">/*stretch（默认值）：轴线占满整个交叉轴。*/</span></span><br></pre></td></tr></table></figure><ul><li>具体参考 <a href="http://js.jirengu.com/dozuy" target="_blank" rel="noopener">http://js.jirengu.com/dozuy</a> 除了以上6种，还有其他属性，兼容性未测试。</li></ul><h3 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">以下6个属性设置在项目中:</span><br><span class="line"> - order</span><br><span class="line"> - flex-grow</span><br><span class="line"> - flex-shrink</span><br><span class="line"> - flex-basis</span><br><span class="line"> - flex</span><br><span class="line"> - align-self</span><br></pre></td></tr></table></figure><p>1.order属性</p><ul><li><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p></li><li><p>HTML代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span>&gt;</span>1<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span>2<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span>&gt;</span>3<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>CSS代码:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">main</span> &#123; <span class="attribute">display</span>: flex;  <span class="attribute">text-align</span>:center; &#125;</span><br><span class="line"><span class="selector-tag">main</span> &gt; <span class="selector-tag">article</span> &#123; <span class="attribute">flex</span>:<span class="number">1</span>;        <span class="attribute">order</span>: <span class="number">2</span>;<span class="attribute">background</span>: red;&#125;</span><br><span class="line"><span class="selector-tag">main</span> &gt; <span class="selector-tag">nav</span>     &#123; <span class="attribute">width</span>: <span class="number">200px</span>;  <span class="attribute">order</span>: <span class="number">1</span>;<span class="attribute">background</span>: blue;&#125;</span><br><span class="line"><span class="selector-tag">main</span> &gt; <span class="selector-tag">aside</span>   &#123; <span class="attribute">width</span>: <span class="number">200px</span>;  <span class="attribute">order</span>: <span class="number">3</span>;<span class="attribute">background</span>: yellow;&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体例子: <a href="http://js.jirengu.com/qolov" target="_blank" rel="noopener">http://js.jirengu.com/qolov</a></p></li></ul><p>2.flex-grow属性</p><ul><li>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</li><li><p>如果flex-grow的属性为1，在项目种的所有容器平分整块区域，每块区域一样大小。如果有一个容器属性为2，其余都为1，那么这个容易的大小比其他容器要大一倍。</p></li><li><p>HTML代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"background-color:red;"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"background-color:lightblue;"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"background-color:yellow;"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> <span class="attr">style</span>=<span class="string">"background-color:brown;"</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> <span class="attr">style</span>=<span class="string">"background-color:lightgreen;"</span>&gt;</span>E<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"background-color:brown;"</span>&gt;</span>F<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>CSS代码:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#content</span> &#123;<span class="attribute">display</span>: flex;<span class="attribute">justify-content</span>: space-around;<span class="attribute">flex-flow</span>: row wrap;<span class="attribute">align-items</span>: stretch;&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;<span class="attribute">flex-grow</span>: <span class="number">1</span>;<span class="attribute">border</span>: <span class="number">3px</span> solid <span class="built_in">rgba</span>(0,0,0,.2);&#125;</span><br><span class="line"><span class="selector-class">.box1</span> &#123;<span class="attribute">flex-grow</span>: <span class="number">2</span>;<span class="attribute">border</span>: <span class="number">3px</span> solid <span class="built_in">rgba</span>(0,0,0,.2);&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体例子 :<a href="http://js.jirengu.com/lamob" target="_blank" rel="noopener">http://js.jirengu.com/lamob</a></p></li></ul><p>3.flex-shrink属性</p><ul><li><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</li><li>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</li><li><p>负值对该属性无效。</p></li><li><p>HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"background-color:red;"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"background-color:lightblue;"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"background-color:yellow;"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> <span class="attr">style</span>=<span class="string">"background-color:brown;"</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> <span class="attr">style</span>=<span class="string">"background-color:lightgreen;"</span>&gt;</span>E<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>CSS代码:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#content</span> &#123;<span class="attribute">display</span>: flex;<span class="attribute">width</span>: <span class="number">300px</span>;&#125;</span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">div</span> &#123;<span class="attribute">flex-basis</span>: <span class="number">120px</span>;<span class="attribute">border</span>: <span class="number">3px</span> solid <span class="built_in">rgba</span>(0,0,0,.2);&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123; <span class="attribute">flex-shrink</span>: <span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.box1</span> &#123; <span class="attribute">flex-shrink</span>: <span class="number">2</span>; &#125;</span><br></pre></td></tr></table></figure></li><li><p>具体例子: <a href="http://js.jirengu.com/nusun" target="_blank" rel="noopener">http://js.jirengu.com/nusun</a></p></li></ul><p>4.flex-basis属性</p><ul><li><code>flex-basis</code> 指定了 flex 元素在主轴方向上的初始大小。如果不使用 box-sizing 来改变盒模型的话，那么这个属性就决定了 flex 元素的内容盒（content-box）的宽或者高（取决于主轴的方向）的尺寸大小。</li><li>它可以设为跟width或height属性一样的值（比如200px），则项目将占据固定空间。</li><li>语法(参考MDN):<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/* Specify &lt;&apos;width&apos;&gt; */</span><br><span class="line">flex-basis: 10em;</span><br><span class="line">flex-basis: 3px;</span><br><span class="line">flex-basis: auto;</span><br><span class="line"></span><br><span class="line">/* Intrinsic sizing keywords */</span><br><span class="line">flex-basis: fill;</span><br><span class="line">flex-basis: max-content;</span><br><span class="line">flex-basis: min-content;</span><br><span class="line">flex-basis: fit-content;</span><br><span class="line"></span><br><span class="line">/* Automatically size based on the flex item’s content */</span><br><span class="line">flex-basis: content;</span><br><span class="line"></span><br><span class="line">/* Global values */</span><br><span class="line">flex-basis: inherit;</span><br><span class="line">flex-basis: initial;</span><br><span class="line">flex-basis: unset;</span><br></pre></td></tr></table></figure></li></ul><p>5.flex属性</p><ul><li>flex规定了弹性元素如何伸长或缩短以适应flex容器中的可用空间。这是一个简写属性，可以同时设置flex-grow, flex-shrink与flex-basis。</li><li><p>该属性有两个快捷值：<code>auto</code> <code>(1 1 auto)</code> 和 <code>none</code> <code>(0 0 auto)</code>。</p></li><li><p>MDN正式语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">flex:none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>6.align-self属性</p><ul><li>属性 align-self 会对齐当前 flex 行中的 flex 元素，并覆盖 align-items 的值. 如果任何 flex 元素的侧轴方向 margin 值设置为 auto，则会忽略 align-self。</li><li>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</li></ul><hr><p>参考链接:</p><ul><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/CSS/flex</a>        </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;网页布局一直是CSS的一个重点应用,布局的传统方法是基于盒模型,依赖&lt;code&gt;display&lt;/code&gt;属性+&lt;code&gt;position&lt;/code&gt;属性+&lt;code&gt;float&lt;/code&gt;属性。它对于那些特殊布局方法非常不方便,比如,垂直
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>css垂直居中的几种办法</title>
    <link href="http://yoursite.com/2017/12/15/css%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2017/12/15/css垂直居中的几种办法/</id>
    <published>2017-12-15T15:11:20.000Z</published>
    <updated>2017-12-16T10:00:18.272Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>div垂直居中一直是css布局中的热点，下面归纳总结一下div垂直居中的几种办法。</p></blockquote><h3 id="table元素自带属性"><a href="#table元素自带属性" class="headerlink" title="table元素自带属性"></a>table元素自带属性</h3><blockquote><p>这里有必要介绍一下<code>table</code>元素的属性，在css没有出现之前，HTML<code>table</code>元素常常用于页面布局。这种办法在HTML4之后便不再推荐使用。</p></blockquote><ul><li><p>具体参考MDN<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/table" target="_blank" rel="noopener">table元素</a></p></li><li><p>具体例子:<a href="http://js.jirengu.com/dodel/1/edit" target="_blank" rel="noopener">http://js.jirengu.com/dodel/1/edit</a></p></li></ul><ul><li><p>HTML代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">   这是一串文字.这是一串文字.这是一串文字.这是一串文字.这是一串文字.这是一串文字.这是一串文字.这是一串文字.这是一串文字.这是一串文字.这是一串文字.这是一串文字.这是一串文字.这是一串文字.这是一串文字.这是一串文字.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>CSS代码:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>效果如下:<br><img src="https://i.loli.net/2017/12/16/5a34e34798ac6.png" alt="table垂直居中"></p></li></ul><h3 id="div装成table"><a href="#div装成table" class="headerlink" title="div装成table"></a>div装成table</h3><blockquote><p>这里就不赘述<code>table</code>元素的属性了，直接上代码。</p></blockquote><ul><li><p>HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"td"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">      一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>CSS代码:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.table</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.tr</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: table-row;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.td</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体例子在这:<a href="http://js.jirengu.com/vedew/1/edit?html,css,output" target="_blank" rel="noopener">http://js.jirengu.com/vedew/1/edit?html,css,output</a></p></li><li><p>当中涉及到一个<code>display:table</code>的属性，具体参考MDN<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noopener">CSS中display属性</a></p></li><li><p>效果如下:<br><img src="https://i.loli.net/2017/12/16/5a34e57f8180e.png" alt="div装成table元素"></p></li></ul><h3 id="translate-50-实现垂直居中"><a href="#translate-50-实现垂直居中" class="headerlink" title="translate -50% 实现垂直居中"></a>translate -50% 实现垂直居中</h3><blockquote><p><code>translate</code>属性具体参考MDN中<code>transform</code>属性 : <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform</a></p></blockquote><ul><li><p>HTML代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">    一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>CSS代码:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体参考例子:<a href="http://js.jirengu.com/gepuy/1/edit?html,css,output" target="_blank" rel="noopener">http://js.jirengu.com/gepuy/1/edit?html,css,output</a></p></li><li><p>实现效果如下:<br><img src="https://i.loli.net/2017/12/16/5a34e792ae0e5.png" alt="translate -50%实现垂直居中"></p></li></ul><h3 id="absolute-margin-auto-实现水平垂直居中"><a href="#absolute-margin-auto-实现水平垂直居中" class="headerlink" title="absolute margin auto 实现水平垂直居中"></a>absolute margin auto 实现水平垂直居中</h3><blockquote><p><code>margin:0 auto</code>是可以做到垂直居中的，做到水平居中还需要用到绝对定位。</p></blockquote><ul><li><p>HTML代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">    一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>CSS代码:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体例子:<a href="http://js.jirengu.com/legoy/1/edit?html,css,output" target="_blank" rel="noopener">http://js.jirengu.com/legoy/1/edit?html,css,output</a></p></li><li><p>实现效果如下:<br><img src="https://i.loli.net/2017/12/16/5a34e98543475.png" alt="绝对定位 margin auto 实现水平垂直居中"></p></li><li><p>当中涉及到一个绝对定位的知识，具体可参考MDN<code>position属性</code>:<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/position</a></p></li></ul><h3 id="flex布局实现水平垂直居中"><a href="#flex布局实现水平垂直居中" class="headerlink" title="flex布局实现水平垂直居中"></a>flex布局实现水平垂直居中</h3><blockquote><p>flex是我最喜欢使用的也，是我使用的最多的布局方式。通过设置<code>align-items:center</code>和<code>justify-content:center</code>即可实现水平垂直居中。</p></blockquote><ul><li><p>HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">    一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>CSS代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid red;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体例子:<a href="http://js.jirengu.com/wohog/1/edit?html,css,output" target="_blank" rel="noopener">http://js.jirengu.com/wohog/1/edit?html,css,output</a></p></li><li><p>实现效果如下:<br><img src="https://i.loli.net/2017/12/16/5a34eb98139df.png" alt="flex实现水平垂直居中"></p></li><li><p>flex属性具体参考MDN<code>flex</code>:<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex</a></p></li></ul><hr><p>这是一些我对于css用来做垂直居中办法的理解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;div垂直居中一直是css布局中的热点，下面归纳总结一下div垂直居中的几种办法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;table元素自带属性&quot;&gt;&lt;a href=&quot;#table元素自带属性&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>我对http的一些简单理解</title>
    <link href="http://yoursite.com/2017/12/14/%E6%88%91%E5%AF%B9http%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/12/14/我对http的一些简单理解/</id>
    <published>2017-12-14T13:58:19.000Z</published>
    <updated>2017-12-16T10:00:18.277Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇博客只是我对HTTP的一些浅显的理解</p></blockquote><hr><p>HTTP是一个超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议[1]。HTTP是万维网的数据通信的基础。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。通过HTTP或者HTTPS协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识。</p><ul><li>摘自wiki<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">HTTP</a></li></ul><hr><ul><li>浏览器负责发起请求</li><li>服务器在 80 端口接收请求</li><li>服务器负责返回内容（响应）</li><li>浏览器负责下载响应内容<br>HTTP是浏览器和服务器之间的一种通讯协议，指导浏览器和服务器如何进行沟通。</li></ul><p>在浏览器和服务器之间通讯会伴随着请求与响应，过程基本就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">浏览器 ---&gt; 服务器 // 浏览器向服务器发送请求</span><br><span class="line">浏览器 &lt;--- 服务器 // 浏览器从服务器得到响应</span><br></pre></td></tr></table></figure></p><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><ol><li>请求构成<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 动词 路径 协议/版本  // 1.请求头</span><br><span class="line">2 Key1: value1      // 2.消息体</span><br><span class="line">2 Key2: value2</span><br><span class="line">2 Key3: value3</span><br><span class="line">2 Content-Type: application/x-www-form-urlencoded</span><br><span class="line">2 Host: www.baidu.com</span><br><span class="line">2 User-Agent: curl/7.54.0</span><br><span class="line">3                   // 3.空行(回车)</span><br><span class="line">4 要上传的数据        // 4.其他消息内容</span><br></pre></td></tr></table></figure></li></ol><ul><li>请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）</li><li>第三部分永远都是一个回车（\n）</li><li>动词有 GET POST PUT PATCH DELETE HEAD OPTIONS 等</li><li>这里的路径包括「查询参数」，但不包括「锚点」</li><li>如果你没有写路径，那么路径默认为 /</li><li>第 2 部分中的 Content-Type 标注了第 4 部分的格式</li></ul><ol><li>请求方法</li></ol><ul><li>GET 一般用于查询</li><li>POST 一般用于表单提交</li></ul><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>响应的构成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 协议/版本号 状态码 状态解释    // 1.响应头</span><br><span class="line">2 Key1: value1               // 2.消息体</span><br><span class="line">2 Key2: value2</span><br><span class="line">2 Content-Length: 17931</span><br><span class="line">2 Content-Type: text/html</span><br><span class="line">3                            // 3.回车</span><br><span class="line">4 要下载的内容                 // 4.其他消息内容</span><br></pre></td></tr></table></figure></p><ul><li>状态码要背，是服务器对浏览器说的话<ul><li>1xx 不常用</li><li>2xx 表示成功</li><li>3xx 表示滚吧</li><li>4xx 表示你丫错了</li><li>5xx 表示好吧，我错了</li></ul></li><li>状态解释没什么用</li><li>第 2 部分中的 Content-Type 标注了第 4 部分的格式</li><li>第 2 部分中的 Content-Type 遵循 MIME 规范</li></ul><h3 id="关于HTTP相关问题"><a href="#关于HTTP相关问题" class="headerlink" title="关于HTTP相关问题"></a>关于HTTP相关问题</h3><ul><li><p>HTTP 协议的底层其实是由 TCP 协议和 IP 协议（简称 TCP/IP）构建的。</p><ul><li><p><a href="https://www.nowcoder.com/questionTerminal/63c8b45c91a544bd8febc1f1ff02e3b5?toCommentId=73766" target="_blank" rel="noopener">TCP 和 UDP 的区别是什么</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TCP 可靠、面向连接、相对 UDP 较慢；UDP 不可靠，不面向连接、相对 TCP 较快。</span><br><span class="line">其中可靠是指请求成功与否，请求成功会看到URL对应地址的页面，请求失败会看到一个带有状态码的页面。</span><br><span class="line">面向连接是指TCP必须发起一个连接，连接到对应地址的服务器。</span><br></pre></td></tr></table></figure></li><li><p><a href="https://github.com/jawil/blog/issues/14" target="_blank" rel="noopener">TCP 的三次握手指的是什么</a><br>每次建立连接前，客户端和服务端之前都要先进行三次对话才开始正式传输内容，三次对话大概是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 客户端：我要连接你了，可以吗</span><br><span class="line">2. 服务端：嗯，我准备好了，连接我吧</span><br><span class="line">3. 客户端：那我连接你咯。</span><br><span class="line">4. 开始后面步骤</span><br></pre></td></tr></table></figure></li></ul></li><li><p>TCP的访问不光需要指定IP，还需要指定端口。</p><ul><li>使用 HTTP 协议访问另一个 IP 时，比如同时提供 IP 和端口号，缺一不可。</li><li>浏览器会自动默认加上80端口。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http//qq.com</span><br><span class="line">http//qq.com:80 //浏览器默认添加上的80端口</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这篇博客只是我对HTTP的一些浅显的理解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;HTTP是一个超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用
      
    
    </summary>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
</feed>
